{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/app.less","path":"css/app.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/article.less","path":"css/article.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/archive.less","path":"css/archive.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/aside.less","path":"css/aside.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/category.less","path":"css/category.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/icons.less","path":"css/icons.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/footer.less","path":"css/footer.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/comments.less","path":"css/comments.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/mixin.less","path":"css/mixin.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/markdown.less","path":"css/markdown.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/nav.less","path":"css/nav.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/monokai-sublime.less","path":"css/monokai-sublime.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/page.less","path":"css/page.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/reset.less","path":"css/reset.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/tags.less","path":"css/tags.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/vars.less","path":"css/vars.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/widget.less","path":"css/widget.less","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/scrollspy.min.js","path":"js/scrollspy.min.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/landscape/source/svg/github.svg","path":"svg/github.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/svg/more.svg","path":"svg/more.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/svg/twitter.svg","path":"svg/twitter.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"9840ae7d87abbb5d1c3485fe49d208766e7e7a91","modified":1559014439691},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1559014439691},{"_id":"themes/landscape/_config.yml","hash":"62f5bb478a4b3987d0efde77804e899c91195299","modified":1559728699454},{"_id":"themes/landscape/README.md","hash":"e3f71c54f52ef1188aa19deea7157fb5f224b3b6","modified":1559014439692},{"_id":"source/_posts/jc-1.md","hash":"aefe96ae4085339ac415cf1d97009742c1a5f296","modified":1560149010221},{"_id":"source/_posts/jc-10.md","hash":"a376eb3720a30430be13513027dc0209b0b08c2c","modified":1560760196235},{"_id":"source/_posts/jc-2.md","hash":"a6e5536e7610f7395280ee6476270ed228cbbf0d","modified":1559460838221},{"_id":"source/_posts/jc-3.md","hash":"80f844c76081788a019936dcb324f89d846b6bc5","modified":1559548621178},{"_id":"source/_posts/jc-4.md","hash":"27b74b000f2f7fff5afb77ac146a1dc72772735e","modified":1559551173591},{"_id":"source/_posts/jc-5.md","hash":"dce734a2eda2fc89fc13b63a0094b3e52c3d01f8","modified":1559551674058},{"_id":"source/_posts/jc-6.md","hash":"cf3828d68c82116903e2bb4460711daa76605e0d","modified":1559726900228},{"_id":"source/_posts/jc-7.md","hash":"d840be65f2097442f89fba4715f2f6eddced9244","modified":1560150133796},{"_id":"source/_posts/jc-8.md","hash":"fc94e47b05d157b3ec12ca2713782fae44bbd40b","modified":1560245491571},{"_id":"source/_posts/jc-9.md","hash":"64362a90ab5b561c748db7ff912c017a0af2018e","modified":1560670613180},{"_id":"source/about/index.md","hash":"9ff6e9b1e0867d156c79361fd1521ee7d896cf07","modified":1559129669886},{"_id":"source/tags/index.md","hash":"f1ea2687caea3ea080a0f6ff7a742013b718cd90","modified":1559129858316},{"_id":"themes/landscape/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1559014439682},{"_id":"themes/landscape/.git/config","hash":"a9f56a9d2fdd02badb1658822b5304709c264fc9","modified":1559014439686},{"_id":"themes/landscape/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1559014436131},{"_id":"themes/landscape/.git/index","hash":"db0f7ed2e140ad27f52a4bd47ce4c45dbf64dffd","modified":1559321644907},{"_id":"themes/landscape/.git/packed-refs","hash":"f183aa8995836a9c9b4d7408174485ba3fba08de","modified":1559014439679},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1559014439692},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1559014439692},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1559014439693},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1559014439693},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1559014439693},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1559014439693},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1559014439694},{"_id":"themes/landscape/layout/archive.ejs","hash":"20a4f9193abdaf8b3ee0e7191f055d075d91e87c","modified":1559014439696},{"_id":"themes/landscape/layout/categories.ejs","hash":"1a302302df07dcb13b92992580c2661de5d3baf0","modified":1559014439697},{"_id":"themes/landscape/layout/category.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1559014439697},{"_id":"themes/landscape/layout/index.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1559014439697},{"_id":"themes/landscape/layout/page.ejs","hash":"5dc84a083be61b46f78d0080870818b7dbb2a2e6","modified":1559014439698},{"_id":"themes/landscape/layout/layout.ejs","hash":"e51c85173c635571422a88ba33c16180c8735dfd","modified":1559321643477},{"_id":"themes/landscape/layout/post.ejs","hash":"890b1c8413d7da9cf3e670d7d5296749ecf043a3","modified":1559014439698},{"_id":"themes/landscape/layout/tag.ejs","hash":"0ef29619219277632a221155e51a85673011e248","modified":1559014439698},{"_id":"themes/landscape/layout/tags.ejs","hash":"8b3a6ad1d789addeb628ad7a7d5ffc8a4b764bb3","modified":1559014439698},{"_id":"themes/landscape/scripts/include.js","hash":"3fd0947904a06209d1f58e97efe77d06abbabcb5","modified":1559014439701},{"_id":"themes/landscape/preview.png","hash":"3dd563ba6885b21e85e721daa4e038f748585f8c","modified":1559014439700},{"_id":"themes/landscape/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1559014436133},{"_id":"themes/landscape/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1559014436134},{"_id":"themes/landscape/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1559014436131},{"_id":"themes/landscape/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1559014436135},{"_id":"themes/landscape/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1559014436132},{"_id":"themes/landscape/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1559014436135},{"_id":"themes/landscape/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1559014436132},{"_id":"themes/landscape/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1559014436133},{"_id":"themes/landscape/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1559014436134},{"_id":"themes/landscape/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1559014436136},{"_id":"themes/landscape/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1559014436131},{"_id":"themes/landscape/.git/logs/HEAD","hash":"2b5c1b14789b1488544ed727198664f01212f5ca","modified":1559014439684},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"67891e427712e39d73058f3001eabd8758dd0bbf","modified":1559014439694},{"_id":"themes/landscape/layout/_partial/articles.ejs","hash":"3ca4869df35f85c39997a99ea32b3366e02de34a","modified":1559014439695},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"40cff2943bda22e0ad6ffc5b4a24917d1a797bea","modified":1559014439694},{"_id":"themes/landscape/layout/_partial/aside.ejs","hash":"feae0af38913426595a9dfe8c1b44db100b790d5","modified":1559728693986},{"_id":"themes/landscape/layout/_partial/comments.ejs","hash":"7f002aa35b7b2495f5d764ff049942dcd5795ed2","modified":1559014439695},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"9f139c694119c0c8b7f8faff871775119e0d2734","modified":1559324508458},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"4b3a9262654ef3bc91fd9067e0db20866bb18da8","modified":1559014439695},{"_id":"themes/landscape/layout/_partial/nav.ejs","hash":"c87ed02859a3e826dfc990af7e9a0564958a2c1c","modified":1559014439695},{"_id":"themes/landscape/source/css/app.less","hash":"cc792a2135f30d118ba1bec9b94b56316b5b8c2c","modified":1559014439701},{"_id":"themes/landscape/source/css/article.less","hash":"daf705d35db007d1d0504a07b95ce9cacc425657","modified":1559014439702},{"_id":"themes/landscape/source/css/archive.less","hash":"6ad7ea875fcb1d996475a7aeb502d7f19d9cc6a4","modified":1559014439702},{"_id":"themes/landscape/source/css/aside.less","hash":"4f012749b83d63fc1ac7f1b05a5aed8f318f7c51","modified":1559014439702},{"_id":"themes/landscape/source/css/category.less","hash":"30fbaf3cc326b6d1068e3fb4f5ece7c97de6b00c","modified":1559014439702},{"_id":"themes/landscape/source/css/icons.less","hash":"7d4f4c543ab1a777ec2eb5156f9e25b19063fedc","modified":1559014439703},{"_id":"themes/landscape/source/css/footer.less","hash":"4c28c726f272590bc681a404fb54ca9e5ca0145e","modified":1559014439703},{"_id":"themes/landscape/source/css/comments.less","hash":"8767a0cf8e31f4d07f07ead3264b68eb1da1a7a4","modified":1559014439703},{"_id":"themes/landscape/source/css/mixin.less","hash":"763a8951ed45ef3a1fe4898f0be2dd83f5598cf3","modified":1559014439704},{"_id":"themes/landscape/source/css/markdown.less","hash":"73de99fab884e7cc85a79fb1edf69aad2159ab6a","modified":1559724783558},{"_id":"themes/landscape/source/css/nav.less","hash":"c237fbc4dedf5a385d020a8d785549b28f69afde","modified":1559014439705},{"_id":"themes/landscape/source/css/monokai-sublime.less","hash":"a22d55e0805726dbb7e4e90d2091630d41a3f13a","modified":1559014439704},{"_id":"themes/landscape/source/css/page.less","hash":"2c10c522627d8a486ab8a7ad91614a5a3a2b0c66","modified":1559014439705},{"_id":"themes/landscape/source/css/reset.less","hash":"eeb803562a747880f8e441b5555db05baeca5d92","modified":1559014439705},{"_id":"themes/landscape/source/css/style.less","hash":"1cb267913e61225328507e9bf4a4645e6060d866","modified":1559014439705},{"_id":"themes/landscape/source/css/tags.less","hash":"f950a90c998b15c1b242a513173c06922d6b91d1","modified":1559014439706},{"_id":"themes/landscape/source/css/vars.less","hash":"33875f71421caf72d8a86a7dbc011fb64eb7e475","modified":1559014439706},{"_id":"themes/landscape/source/css/widget.less","hash":"8373c2246dfb0261278003f1985a53707494e0b9","modified":1559014439706},{"_id":"themes/landscape/source/fonts/icomoon.eot","hash":"8300564edcd12262c6b8b97ba225bc00b72f5984","modified":1559014439707},{"_id":"themes/landscape/source/fonts/icomoon.svg","hash":"53a7893b9b630440f7381b156d3b7c9566c47523","modified":1559014439707},{"_id":"themes/landscape/source/fonts/icomoon.ttf","hash":"6b577c657ccb5de7c321e51942a52922a4e95ec1","modified":1559014439707},{"_id":"themes/landscape/source/fonts/icomoon.woff","hash":"5a3b86fa1122f78d9b285fbd390bf142721c51ed","modified":1559014439708},{"_id":"themes/landscape/source/images/avatar.jpg","hash":"224560105516653d534001c7eb0c307921dd5f59","modified":1559283655520},{"_id":"themes/landscape/source/images/.DS_Store","hash":"d06d45c78ff0ec1cc24688536ccf362e791adaf4","modified":1559283768473},{"_id":"themes/landscape/source/js/scrollspy.min.js","hash":"076f7db44c3a05147144f736cae159baf1612f72","modified":1559014439709},{"_id":"themes/landscape/source/images/favicon.ico","hash":"ce9d440bcb9c505bc84792d2e9471525532566c5","modified":1559283680664},{"_id":"themes/landscape/source/svg/github.svg","hash":"f2355900fe0ec5ed2f4e6d4cb271bda5feb90f06","modified":1559014439710},{"_id":"themes/landscape/source/svg/more.svg","hash":"d4aa97cd29baaaac750a60ce6e7b6b00fc573101","modified":1559014439710},{"_id":"themes/landscape/source/svg/twitter.svg","hash":"05ad5df10a4495e85ae417e241186e5205af930d","modified":1559014439710},{"_id":"themes/landscape/.git/objects/pack/pack-02ebcaf204aa36c72f96153c59958f68bb63337e.idx","hash":"bd73f9f377356855be548c60991721d5986cb131","modified":1559014439669},{"_id":"themes/landscape/.git/refs/heads/master","hash":"e981df8058339287b08a38b27622dff4fe810497","modified":1559014439683},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"b3bae800ec3a8bcf7e419fbb6d50f8db4b76118a","modified":1559014439696},{"_id":"themes/landscape/layout/_partial/post/tags.ejs","hash":"24abef606b55a9dda97dca79bb8ab46968919423","modified":1559014439696},{"_id":"themes/landscape/.git/logs/refs/heads/master","hash":"2b5c1b14789b1488544ed727198664f01212f5ca","modified":1559014439685},{"_id":"themes/landscape/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1559014439681},{"_id":"themes/landscape/.git/logs/refs/remotes/origin/HEAD","hash":"2b5c1b14789b1488544ed727198664f01212f5ca","modified":1559014439681},{"_id":"themes/landscape/.git/objects/pack/pack-02ebcaf204aa36c72f96153c59958f68bb63337e.pack","hash":"e0a63dc2b477e5bfb6d49d6f324da3068a73ac24","modified":1559014439669}],"Category":[{"name":"gc-end","_id":"cjx1stc0e000354s6owrkrn51"},{"name":"js-end","_id":"cjx1stc0r000f54s6jwtn1xwb"},{"name":"css-end","_id":"cjx1stc0s000i54s6bop7gvzg"}],"Data":[],"Page":[{"title":"about","date":"2019-05-29T11:34:29.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-05-29 19:34:29\n---\n","updated":"2019-05-29T11:34:29.886Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjx1stc15000p54s6ojj55idg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-05-29T11:37:38.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-05-29 19:37:38\n---\n","updated":"2019-05-29T11:37:38.316Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjx1stc16000q54s65q6asgxy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo/github 搭建github博客教程","date":"2019-05-31T06:27:08.000Z","_content":"\n之前买的阿里的云服务器，太贵了没钱续费，github的博客免费，代码托管上去，只需要买个域名甚至不买也行，挺合适，就是访问速度慢点，百度也不收录，但是这些也有解决的办法，具体的解决办法本文不介绍了，以后有时间可以再具体说一说，暂时也可以自己用，反正主要也是自己记录，不求他能有多高的baidu排名。\n\n1.[准备条件](#准备条件)   \n2.[设置本地博客的配置](#设置本地博客的配置)      \n3.[初始化hexo](#初始化hexo)    \n4.[上传项目](#上传项目)   \n<!-- more -->\n5.[文件目录](#文件目录)   \n6.[更换主题](#更换主题)   \n7.[使用方法](#使用方法)   \n8.[常见使用疑问](#常见使用疑问)   \n9.[配置自定义域名](#配置自定义域名)    \n\n## 准备条件：\n\n```\n\t1.node 环境\n\t2.git 环境 配置公钥私钥\n\t3.npm 安装\n\t4.github 账号\n```\n\n> ##### 如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。\n\n## 设置本地博客的配置：\n\n1.全局安装hexo\n```javascript\n\tnpm install -g hexo\n```\n2.新建一个文件夹，cd到当前文件夹，\n```javascript\n\tnpm install hexo --save\n```\n然后\n```javascript\n\thexo v\n```\n出现以下，说明安装成功   \n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/1.png)\n\n> 别着急，就快成功了，再坚持一小小下\n\n## 初始化hexo：   \n1.继续输入\n```javascript\n\thexo init\n```\n实现初始化   \n2.下载好了，再输入\n```javascript\n\thexo s\n```\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/2.png)   \n>这时候我们就可以打开浏览器了，在地址栏中输入http://localhost:400/，我们就可以看到如下图的界面   \n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/3.png)   \n\n> #### **基本搭建完成，其实你才完成了一半**\n\n## 上传项目：   \n1.在github上面先创建一个项目，特别注意，名称的命名\n>github的用户名要和创建的博客的项目名称一致，如下：   \n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/5.png)\n\n> **名称格式：username.github.io**\n\n2.打开项目中_config.yml（配置文件），对它做如下修改，repository后面的内容是 git@gitbub.com:username/库地址 的形式    \n\n> **type、repository、branch冒号的后面都有一个空格**\n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/6.jpg)\n\n3.#### 回到shell，输入：\n```javascript\n\tnpm install hexo-deployer-git --save   \n\thexo g   \n\thexo d   \n```\n\n##### 部署完之后将代码中的 **public**下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http://域名就可以访问。比如：http://xiaosongread.github.io\n\n## 文件目录：\n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/4.png)   \n\n## 更换主题：   \n我更换的主题是：https://github.com/Sanonz/hexo-theme-concise，将次项目clone下来，其他主题：[hexo主题](https://hexo.io/themes/)   \n\n将下载下来的主题中的所有文件copy到你的代码中的themes文件夹中(可以新建一个主题文件夹，比如landscape1),修改文件根目录的配置文件的主题名，如下   \n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/7.jpg)   \n\n> **此主题可能最后样式可以不起作用，应为此模板用了less，需要安装 npm install hexo-renderer-less --save**\n\n##### 然后重新打包项目\n``` \nhexo g\nhexo d\n```\n接着重新将public文件上传到你的github项目中。\n\n## 使用方法：   \n\nshell|表头\n---|:--:\nhexo s|本地启动服务\nhexo new 'filename'|创建md文件\nhexo s hexo g|修改内容打包文件\n\n## 常见使用疑问：\n1.此项目没有后台系统如何录数据？\n此系统录入数据的步骤是：\n* hexo new 'filename'（新建.md文件）\n* 用markdown格式排版内容\n* hexo s hexo g 重新打包上传就页面可以看见你添加的文章    \n\n2.如何为文章分类？\n添加分类列表，设置文章的 categories 字段然后访问 /categories/front-end\n\n```\n---\ntitle: Hello World\ndate: 2017-10-20 20:00:00\ncategories: front-end\n---\n```\n如何设置分页，截断文章等不会的问题可以在本项目提交issues,或者访问[本主题](https://github.com/sanonz/hexo-theme-concise)查看\n\n> **需要了解markdown的基本语法**\n\n[常用markdown语法](https://github.com/xiaosongread/markdow)   \n\n\n## 配置自定义域名：\n此过程比较麻烦，有需要的可以提issure,有时间可以补充一下... ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- [点击查看参考博客](https://www.cnblogs.com/trista222/p/8017300.html)\n\n```shell\nhexo new page 'tags'\nhexo new 'filename'   \nhexo g   \nhexo d   \n``` -->","source":"_posts/jc-1.md","raw":"---\ntitle: hexo/github 搭建github博客教程\ndate: 2019-05-31 14:27:08\ntags:\n---\n\n之前买的阿里的云服务器，太贵了没钱续费，github的博客免费，代码托管上去，只需要买个域名甚至不买也行，挺合适，就是访问速度慢点，百度也不收录，但是这些也有解决的办法，具体的解决办法本文不介绍了，以后有时间可以再具体说一说，暂时也可以自己用，反正主要也是自己记录，不求他能有多高的baidu排名。\n\n1.[准备条件](#准备条件)   \n2.[设置本地博客的配置](#设置本地博客的配置)      \n3.[初始化hexo](#初始化hexo)    \n4.[上传项目](#上传项目)   \n<!-- more -->\n5.[文件目录](#文件目录)   \n6.[更换主题](#更换主题)   \n7.[使用方法](#使用方法)   \n8.[常见使用疑问](#常见使用疑问)   \n9.[配置自定义域名](#配置自定义域名)    \n\n## 准备条件：\n\n```\n\t1.node 环境\n\t2.git 环境 配置公钥私钥\n\t3.npm 安装\n\t4.github 账号\n```\n\n> ##### 如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。\n\n## 设置本地博客的配置：\n\n1.全局安装hexo\n```javascript\n\tnpm install -g hexo\n```\n2.新建一个文件夹，cd到当前文件夹，\n```javascript\n\tnpm install hexo --save\n```\n然后\n```javascript\n\thexo v\n```\n出现以下，说明安装成功   \n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/1.png)\n\n> 别着急，就快成功了，再坚持一小小下\n\n## 初始化hexo：   \n1.继续输入\n```javascript\n\thexo init\n```\n实现初始化   \n2.下载好了，再输入\n```javascript\n\thexo s\n```\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/2.png)   \n>这时候我们就可以打开浏览器了，在地址栏中输入http://localhost:400/，我们就可以看到如下图的界面   \n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/3.png)   \n\n> #### **基本搭建完成，其实你才完成了一半**\n\n## 上传项目：   \n1.在github上面先创建一个项目，特别注意，名称的命名\n>github的用户名要和创建的博客的项目名称一致，如下：   \n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/5.png)\n\n> **名称格式：username.github.io**\n\n2.打开项目中_config.yml（配置文件），对它做如下修改，repository后面的内容是 git@gitbub.com:username/库地址 的形式    \n\n> **type、repository、branch冒号的后面都有一个空格**\n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/6.jpg)\n\n3.#### 回到shell，输入：\n```javascript\n\tnpm install hexo-deployer-git --save   \n\thexo g   \n\thexo d   \n```\n\n##### 部署完之后将代码中的 **public**下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http://域名就可以访问。比如：http://xiaosongread.github.io\n\n## 文件目录：\n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/4.png)   \n\n## 更换主题：   \n我更换的主题是：https://github.com/Sanonz/hexo-theme-concise，将次项目clone下来，其他主题：[hexo主题](https://hexo.io/themes/)   \n\n将下载下来的主题中的所有文件copy到你的代码中的themes文件夹中(可以新建一个主题文件夹，比如landscape1),修改文件根目录的配置文件的主题名，如下   \n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/7.jpg)   \n\n> **此主题可能最后样式可以不起作用，应为此模板用了less，需要安装 npm install hexo-renderer-less --save**\n\n##### 然后重新打包项目\n``` \nhexo g\nhexo d\n```\n接着重新将public文件上传到你的github项目中。\n\n## 使用方法：   \n\nshell|表头\n---|:--:\nhexo s|本地启动服务\nhexo new 'filename'|创建md文件\nhexo s hexo g|修改内容打包文件\n\n## 常见使用疑问：\n1.此项目没有后台系统如何录数据？\n此系统录入数据的步骤是：\n* hexo new 'filename'（新建.md文件）\n* 用markdown格式排版内容\n* hexo s hexo g 重新打包上传就页面可以看见你添加的文章    \n\n2.如何为文章分类？\n添加分类列表，设置文章的 categories 字段然后访问 /categories/front-end\n\n```\n---\ntitle: Hello World\ndate: 2017-10-20 20:00:00\ncategories: front-end\n---\n```\n如何设置分页，截断文章等不会的问题可以在本项目提交issues,或者访问[本主题](https://github.com/sanonz/hexo-theme-concise)查看\n\n> **需要了解markdown的基本语法**\n\n[常用markdown语法](https://github.com/xiaosongread/markdow)   \n\n\n## 配置自定义域名：\n此过程比较麻烦，有需要的可以提issure,有时间可以补充一下... ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- [点击查看参考博客](https://www.cnblogs.com/trista222/p/8017300.html)\n\n```shell\nhexo new page 'tags'\nhexo new 'filename'   \nhexo g   \nhexo d   \n``` -->","slug":"jc-1","published":1,"updated":"2019-06-10T06:43:30.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc05000054s6bm8ebhzu","content":"<p>之前买的阿里的云服务器，太贵了没钱续费，github的博客免费，代码托管上去，只需要买个域名甚至不买也行，挺合适，就是访问速度慢点，百度也不收录，但是这些也有解决的办法，具体的解决办法本文不介绍了，以后有时间可以再具体说一说，暂时也可以自己用，反正主要也是自己记录，不求他能有多高的baidu排名。</p>\n<p>1.<a href=\"#准备条件\">准备条件</a><br>2.<a href=\"#设置本地博客的配置\">设置本地博客的配置</a><br>3.<a href=\"#初始化hexo\">初始化hexo</a><br>4.<a href=\"#上传项目\">上传项目</a><br><a id=\"more\"></a><br>5.<a href=\"#文件目录\">文件目录</a><br>6.<a href=\"#更换主题\">更换主题</a><br>7.<a href=\"#使用方法\">使用方法</a><br>8.<a href=\"#常见使用疑问\">常见使用疑问</a><br>9.<a href=\"#配置自定义域名\">配置自定义域名</a>    </p>\n<h2 id=\"准备条件：\"><a href=\"#准备条件：\" class=\"headerlink\" title=\"准备条件：\"></a>准备条件：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.node 环境</span><br><span class=\"line\">2.git 环境 配置公钥私钥</span><br><span class=\"line\">3.npm 安装</span><br><span class=\"line\">4.github 账号</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。\"><a href=\"#如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。\" class=\"headerlink\" title=\"如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。\"></a>如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。</h5></blockquote>\n<h2 id=\"设置本地博客的配置：\"><a href=\"#设置本地博客的配置：\" class=\"headerlink\" title=\"设置本地博客的配置：\"></a>设置本地博客的配置：</h2><p>1.全局安装hexo<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<p>2.新建一个文件夹，cd到当前文件夹，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure></p>\n<p>然后<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo v</span><br></pre></td></tr></table></figure></p>\n<p>出现以下，说明安装成功   </p>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/1.png\" alt=\"blockchain\"></p>\n<blockquote>\n<p>别着急，就快成功了，再坚持一小小下</p>\n</blockquote>\n<h2 id=\"初始化hexo：\"><a href=\"#初始化hexo：\" class=\"headerlink\" title=\"初始化hexo：\"></a>初始化hexo：</h2><p>1.继续输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></p>\n<p>实现初始化<br>2.下载好了，再输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/2.png\" alt=\"blockchain\">   </p>\n<blockquote>\n<p>这时候我们就可以打开浏览器了，在地址栏中输入<a href=\"http://localhost:400/，我们就可以看到如下图的界面\" target=\"_blank\" rel=\"noopener\">http://localhost:400/，我们就可以看到如下图的界面</a>   </p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/3.png\" alt=\"blockchain\">   </p>\n<blockquote>\n<h4 id=\"基本搭建完成，其实你才完成了一半\"><a href=\"#基本搭建完成，其实你才完成了一半\" class=\"headerlink\" title=\"基本搭建完成，其实你才完成了一半\"></a><strong>基本搭建完成，其实你才完成了一半</strong></h4></blockquote>\n<h2 id=\"上传项目：\"><a href=\"#上传项目：\" class=\"headerlink\" title=\"上传项目：\"></a>上传项目：</h2><p>1.在github上面先创建一个项目，特别注意，名称的命名</p>\n<blockquote>\n<p>github的用户名要和创建的博客的项目名称一致，如下：   </p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/5.png\" alt=\"blockchain\"></p>\n<blockquote>\n<p><strong>名称格式：username.github.io</strong></p>\n</blockquote>\n<p>2.打开项目中_config.yml（配置文件），对它做如下修改，repository后面的内容是 <a href=\"mailto:git@gitbub.com\" target=\"_blank\" rel=\"noopener\">git@gitbub.com</a>:username/库地址 的形式    </p>\n<blockquote>\n<p><strong>type、repository、branch冒号的后面都有一个空格</strong></p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/6.jpg\" alt=\"blockchain\"></p>\n<p>3.#### 回到shell，输入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save   </span><br><span class=\"line\">hexo g   </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"部署完之后将代码中的-public下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http-域名就可以访问。比如：http-xiaosongread-github-io\"><a href=\"#部署完之后将代码中的-public下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http-域名就可以访问。比如：http-xiaosongread-github-io\" class=\"headerlink\" title=\"部署完之后将代码中的 public下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http://域名就可以访问。比如：http://xiaosongread.github.io\"></a>部署完之后将代码中的 <strong>public</strong>下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http://域名就可以访问。比如：<a href=\"http://xiaosongread.github.io\" target=\"_blank\" rel=\"noopener\">http://xiaosongread.github.io</a></h5><h2 id=\"文件目录：\"><a href=\"#文件目录：\" class=\"headerlink\" title=\"文件目录：\"></a>文件目录：</h2><p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/4.png\" alt=\"blockchain\">   </p>\n<h2 id=\"更换主题：\"><a href=\"#更换主题：\" class=\"headerlink\" title=\"更换主题：\"></a>更换主题：</h2><p>我更换的主题是：<a href=\"https://github.com/Sanonz/hexo-theme-concise，将次项目clone下来，其他主题：[hexo主题](https://hexo.io/themes/)\" target=\"_blank\" rel=\"noopener\">https://github.com/Sanonz/hexo-theme-concise，将次项目clone下来，其他主题：[hexo主题](https://hexo.io/themes/)</a>   </p>\n<p>将下载下来的主题中的所有文件copy到你的代码中的themes文件夹中(可以新建一个主题文件夹，比如landscape1),修改文件根目录的配置文件的主题名，如下<br><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/7.jpg\" alt=\"blockchain\">   </p>\n<blockquote>\n<p><strong>此主题可能最后样式可以不起作用，应为此模板用了less，需要安装 npm install hexo-renderer-less –save</strong></p>\n</blockquote>\n<h5 id=\"然后重新打包项目\"><a href=\"#然后重新打包项目\" class=\"headerlink\" title=\"然后重新打包项目\"></a>然后重新打包项目</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>接着重新将public文件上传到你的github项目中。</p>\n<h2 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h2><table>\n<thead>\n<tr>\n<th>shell</th>\n<th style=\"text-align:center\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo s</td>\n<td style=\"text-align:center\">本地启动服务</td>\n</tr>\n<tr>\n<td>hexo new ‘filename’</td>\n<td style=\"text-align:center\">创建md文件</td>\n</tr>\n<tr>\n<td>hexo s hexo g</td>\n<td style=\"text-align:center\">修改内容打包文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常见使用疑问：\"><a href=\"#常见使用疑问：\" class=\"headerlink\" title=\"常见使用疑问：\"></a>常见使用疑问：</h2><p>1.此项目没有后台系统如何录数据？<br>此系统录入数据的步骤是：</p>\n<ul>\n<li>hexo new ‘filename’（新建.md文件）</li>\n<li>用markdown格式排版内容</li>\n<li>hexo s hexo g 重新打包上传就页面可以看见你添加的文章    </li>\n</ul>\n<p>2.如何为文章分类？<br>添加分类列表，设置文章的 categories 字段然后访问 /categories/front-end</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hello World</span><br><span class=\"line\">date: 2017-10-20 20:00:00</span><br><span class=\"line\">categories: front-end</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>如何设置分页，截断文章等不会的问题可以在本项目提交issues,或者访问<a href=\"https://github.com/sanonz/hexo-theme-concise\" target=\"_blank\" rel=\"noopener\">本主题</a>查看</p>\n<blockquote>\n<p><strong>需要了解markdown的基本语法</strong></p>\n</blockquote>\n<p><a href=\"https://github.com/xiaosongread/markdow\" target=\"_blank\" rel=\"noopener\">常用markdown语法</a>   </p>\n<h2 id=\"配置自定义域名：\"><a href=\"#配置自定义域名：\" class=\"headerlink\" title=\"配置自定义域名：\"></a>配置自定义域名：</h2><p>此过程比较麻烦，有需要的可以提issure,有时间可以补充一下… …</p>\n<!-- [点击查看参考博客](https://www.cnblogs.com/trista222/p/8017300.html)\n\n```shell\nhexo new page 'tags'\nhexo new 'filename'   \nhexo g   \nhexo d   \n``` -->","site":{"data":{}},"excerpt":"<p>之前买的阿里的云服务器，太贵了没钱续费，github的博客免费，代码托管上去，只需要买个域名甚至不买也行，挺合适，就是访问速度慢点，百度也不收录，但是这些也有解决的办法，具体的解决办法本文不介绍了，以后有时间可以再具体说一说，暂时也可以自己用，反正主要也是自己记录，不求他能有多高的baidu排名。</p>\n<p>1.<a href=\"#准备条件\">准备条件</a><br>2.<a href=\"#设置本地博客的配置\">设置本地博客的配置</a><br>3.<a href=\"#初始化hexo\">初始化hexo</a><br>4.<a href=\"#上传项目\">上传项目</a><br>","more":"<br>5.<a href=\"#文件目录\">文件目录</a><br>6.<a href=\"#更换主题\">更换主题</a><br>7.<a href=\"#使用方法\">使用方法</a><br>8.<a href=\"#常见使用疑问\">常见使用疑问</a><br>9.<a href=\"#配置自定义域名\">配置自定义域名</a>    </p>\n<h2 id=\"准备条件：\"><a href=\"#准备条件：\" class=\"headerlink\" title=\"准备条件：\"></a>准备条件：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.node 环境</span><br><span class=\"line\">2.git 环境 配置公钥私钥</span><br><span class=\"line\">3.npm 安装</span><br><span class=\"line\">4.github 账号</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。\"><a href=\"#如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。\" class=\"headerlink\" title=\"如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。\"></a>如果您是开发人员，这应该都有，不会的可以网上找，依照一大堆的。</h5></blockquote>\n<h2 id=\"设置本地博客的配置：\"><a href=\"#设置本地博客的配置：\" class=\"headerlink\" title=\"设置本地博客的配置：\"></a>设置本地博客的配置：</h2><p>1.全局安装hexo<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<p>2.新建一个文件夹，cd到当前文件夹，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure></p>\n<p>然后<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo v</span><br></pre></td></tr></table></figure></p>\n<p>出现以下，说明安装成功   </p>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/1.png\" alt=\"blockchain\"></p>\n<blockquote>\n<p>别着急，就快成功了，再坚持一小小下</p>\n</blockquote>\n<h2 id=\"初始化hexo：\"><a href=\"#初始化hexo：\" class=\"headerlink\" title=\"初始化hexo：\"></a>初始化hexo：</h2><p>1.继续输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></p>\n<p>实现初始化<br>2.下载好了，再输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/2.png\" alt=\"blockchain\">   </p>\n<blockquote>\n<p>这时候我们就可以打开浏览器了，在地址栏中输入<a href=\"http://localhost:400/，我们就可以看到如下图的界面\" target=\"_blank\" rel=\"noopener\">http://localhost:400/，我们就可以看到如下图的界面</a>   </p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/3.png\" alt=\"blockchain\">   </p>\n<blockquote>\n<h4 id=\"基本搭建完成，其实你才完成了一半\"><a href=\"#基本搭建完成，其实你才完成了一半\" class=\"headerlink\" title=\"基本搭建完成，其实你才完成了一半\"></a><strong>基本搭建完成，其实你才完成了一半</strong></h4></blockquote>\n<h2 id=\"上传项目：\"><a href=\"#上传项目：\" class=\"headerlink\" title=\"上传项目：\"></a>上传项目：</h2><p>1.在github上面先创建一个项目，特别注意，名称的命名</p>\n<blockquote>\n<p>github的用户名要和创建的博客的项目名称一致，如下：   </p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/5.png\" alt=\"blockchain\"></p>\n<blockquote>\n<p><strong>名称格式：username.github.io</strong></p>\n</blockquote>\n<p>2.打开项目中_config.yml（配置文件），对它做如下修改，repository后面的内容是 <a href=\"mailto:git@gitbub.com\" target=\"_blank\" rel=\"noopener\">git@gitbub.com</a>:username/库地址 的形式    </p>\n<blockquote>\n<p><strong>type、repository、branch冒号的后面都有一个空格</strong></p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/6.jpg\" alt=\"blockchain\"></p>\n<p>3.#### 回到shell，输入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save   </span><br><span class=\"line\">hexo g   </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"部署完之后将代码中的-public下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http-域名就可以访问。比如：http-xiaosongread-github-io\"><a href=\"#部署完之后将代码中的-public下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http-域名就可以访问。比如：http-xiaosongread-github-io\" class=\"headerlink\" title=\"部署完之后将代码中的 public下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http://域名就可以访问。比如：http://xiaosongread.github.io\"></a>部署完之后将代码中的 <strong>public</strong>下的文件传到你创建的git项目下面，这样别人也可以通过域名访问我们博客了。在地址栏输入http://域名就可以访问。比如：<a href=\"http://xiaosongread.github.io\" target=\"_blank\" rel=\"noopener\">http://xiaosongread.github.io</a></h5><h2 id=\"文件目录：\"><a href=\"#文件目录：\" class=\"headerlink\" title=\"文件目录：\"></a>文件目录：</h2><p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/4.png\" alt=\"blockchain\">   </p>\n<h2 id=\"更换主题：\"><a href=\"#更换主题：\" class=\"headerlink\" title=\"更换主题：\"></a>更换主题：</h2><p>我更换的主题是：<a href=\"https://github.com/Sanonz/hexo-theme-concise，将次项目clone下来，其他主题：[hexo主题](https://hexo.io/themes/)\" target=\"_blank\" rel=\"noopener\">https://github.com/Sanonz/hexo-theme-concise，将次项目clone下来，其他主题：[hexo主题](https://hexo.io/themes/)</a>   </p>\n<p>将下载下来的主题中的所有文件copy到你的代码中的themes文件夹中(可以新建一个主题文件夹，比如landscape1),修改文件根目录的配置文件的主题名，如下<br><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/7.jpg\" alt=\"blockchain\">   </p>\n<blockquote>\n<p><strong>此主题可能最后样式可以不起作用，应为此模板用了less，需要安装 npm install hexo-renderer-less –save</strong></p>\n</blockquote>\n<h5 id=\"然后重新打包项目\"><a href=\"#然后重新打包项目\" class=\"headerlink\" title=\"然后重新打包项目\"></a>然后重新打包项目</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>接着重新将public文件上传到你的github项目中。</p>\n<h2 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h2><table>\n<thead>\n<tr>\n<th>shell</th>\n<th style=\"text-align:center\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo s</td>\n<td style=\"text-align:center\">本地启动服务</td>\n</tr>\n<tr>\n<td>hexo new ‘filename’</td>\n<td style=\"text-align:center\">创建md文件</td>\n</tr>\n<tr>\n<td>hexo s hexo g</td>\n<td style=\"text-align:center\">修改内容打包文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常见使用疑问：\"><a href=\"#常见使用疑问：\" class=\"headerlink\" title=\"常见使用疑问：\"></a>常见使用疑问：</h2><p>1.此项目没有后台系统如何录数据？<br>此系统录入数据的步骤是：</p>\n<ul>\n<li>hexo new ‘filename’（新建.md文件）</li>\n<li>用markdown格式排版内容</li>\n<li>hexo s hexo g 重新打包上传就页面可以看见你添加的文章    </li>\n</ul>\n<p>2.如何为文章分类？<br>添加分类列表，设置文章的 categories 字段然后访问 /categories/front-end</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hello World</span><br><span class=\"line\">date: 2017-10-20 20:00:00</span><br><span class=\"line\">categories: front-end</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>如何设置分页，截断文章等不会的问题可以在本项目提交issues,或者访问<a href=\"https://github.com/sanonz/hexo-theme-concise\" target=\"_blank\" rel=\"noopener\">本主题</a>查看</p>\n<blockquote>\n<p><strong>需要了解markdown的基本语法</strong></p>\n</blockquote>\n<p><a href=\"https://github.com/xiaosongread/markdow\" target=\"_blank\" rel=\"noopener\">常用markdown语法</a>   </p>\n<h2 id=\"配置自定义域名：\"><a href=\"#配置自定义域名：\" class=\"headerlink\" title=\"配置自定义域名：\"></a>配置自定义域名：</h2><p>此过程比较麻烦，有需要的可以提issure,有时间可以补充一下… …</p>\n<!-- [点击查看参考博客](https://www.cnblogs.com/trista222/p/8017300.html)\n\n```shell\nhexo new page 'tags'\nhexo new 'filename'   \nhexo g   \nhexo d   \n``` -->"},{"title":"GitBook","date":"2019-06-17T08:18:39.000Z","_content":"\nGitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书\n\n```shell\nnpm install -g gitbook-cli\n```\n\n> Typora 下载地址：https://typora.io/   \nGit 下载地址：https://git-scm.com/downloads\n<!-- more -->\n#### use:\n\n1.新建一个mybook的文件夹\n2.cd mybook\n```shell\ngitbook init\n```\n出现以下两个文件: \n> README.md —— 书籍的介绍写在这个文件里   \nSUMMARY.md —— 书籍的目录结构在这里配置\n\n这时候，我们启动恭候多时的 Typora 来编辑这两个文件了：\n\n编辑 SUMMARY.md 文件，内容修改为：\n```shell\n# 目录\n\n* [前言](README.md)\n* [第一章](Chapter1/README.md)\n  * [第1节：衣](Chapter1/衣.md)\n  * [第2节：食](Chapter1/食.md)\n  * [第3节：住](Chapter1/住.md)\n  * [第4节：行](Chapter1/行.md)\n* [第二章](Chapter2/README.md)\n* [第三章](Chapter3/README.md)\n* [第四章](Chapter4/README.md)\n```\n\n然后我们回到命令行，在 mybook 文件夹中再次执行 gitbook init 命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。\n\n接着我们执行:\n```shell\ngitbook serve\n```\nServing book on http://localhost:4000”。嗯，打开浏览器看一下吧：\n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/8.png)\n\n> Typora软件可以将.md文件转化为pdf,word等好多种类型的文件。\n\n\n","source":"_posts/jc-10.md","raw":"---\ntitle: GitBook\ncategories: gc-end\ndate: 2019-06-17 16:18:39\n---\n\nGitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书\n\n```shell\nnpm install -g gitbook-cli\n```\n\n> Typora 下载地址：https://typora.io/   \nGit 下载地址：https://git-scm.com/downloads\n<!-- more -->\n#### use:\n\n1.新建一个mybook的文件夹\n2.cd mybook\n```shell\ngitbook init\n```\n出现以下两个文件: \n> README.md —— 书籍的介绍写在这个文件里   \nSUMMARY.md —— 书籍的目录结构在这里配置\n\n这时候，我们启动恭候多时的 Typora 来编辑这两个文件了：\n\n编辑 SUMMARY.md 文件，内容修改为：\n```shell\n# 目录\n\n* [前言](README.md)\n* [第一章](Chapter1/README.md)\n  * [第1节：衣](Chapter1/衣.md)\n  * [第2节：食](Chapter1/食.md)\n  * [第3节：住](Chapter1/住.md)\n  * [第4节：行](Chapter1/行.md)\n* [第二章](Chapter2/README.md)\n* [第三章](Chapter3/README.md)\n* [第四章](Chapter4/README.md)\n```\n\n然后我们回到命令行，在 mybook 文件夹中再次执行 gitbook init 命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。\n\n接着我们执行:\n```shell\ngitbook serve\n```\nServing book on http://localhost:4000”。嗯，打开浏览器看一下吧：\n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/8.png)\n\n> Typora软件可以将.md文件转化为pdf,word等好多种类型的文件。\n\n\n","slug":"jc-10","published":1,"updated":"2019-06-17T08:29:56.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0a000154s63uk8yl80","content":"<p>GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Typora 下载地址：<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">https://typora.io/</a><br>Git 下载地址：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a><br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use:\"></a>use:</h4><p>1.新建一个mybook的文件夹<br>2.cd mybook<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitbook init</span><br></pre></td></tr></table></figure></p>\n<p>出现以下两个文件: </p>\n<blockquote>\n<p>README.md —— 书籍的介绍写在这个文件里<br>SUMMARY.md —— 书籍的目录结构在这里配置</p>\n</blockquote>\n<p>这时候，我们启动恭候多时的 Typora 来编辑这两个文件了：</p>\n<p>编辑 SUMMARY.md 文件，内容修改为：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 目录</span><br><span class=\"line\"></span><br><span class=\"line\">* [前言](README.md)</span><br><span class=\"line\">* [第一章](Chapter1/README.md)</span><br><span class=\"line\">  * [第1节：衣](Chapter1/衣.md)</span><br><span class=\"line\">  * [第2节：食](Chapter1/食.md)</span><br><span class=\"line\">  * [第3节：住](Chapter1/住.md)</span><br><span class=\"line\">  * [第4节：行](Chapter1/行.md)</span><br><span class=\"line\">* [第二章](Chapter2/README.md)</span><br><span class=\"line\">* [第三章](Chapter3/README.md)</span><br><span class=\"line\">* [第四章](Chapter4/README.md)</span><br></pre></td></tr></table></figure></p>\n<p>然后我们回到命令行，在 mybook 文件夹中再次执行 gitbook init 命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。</p>\n<p>接着我们执行:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitbook serve</span><br></pre></td></tr></table></figure></p>\n<p>Serving book on <a href=\"http://localhost:4000”。嗯，打开浏览器看一下吧：\" target=\"_blank\" rel=\"noopener\">http://localhost:4000”。嗯，打开浏览器看一下吧：</a></p>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/8.png\" alt=\"blockchain\"></p>\n<blockquote>\n<p>Typora软件可以将.md文件转化为pdf,word等好多种类型的文件。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Typora 下载地址：<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">https://typora.io/</a><br>Git 下载地址：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a><br>","more":"</p>\n</blockquote>\n<h4 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use:\"></a>use:</h4><p>1.新建一个mybook的文件夹<br>2.cd mybook<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitbook init</span><br></pre></td></tr></table></figure></p>\n<p>出现以下两个文件: </p>\n<blockquote>\n<p>README.md —— 书籍的介绍写在这个文件里<br>SUMMARY.md —— 书籍的目录结构在这里配置</p>\n</blockquote>\n<p>这时候，我们启动恭候多时的 Typora 来编辑这两个文件了：</p>\n<p>编辑 SUMMARY.md 文件，内容修改为：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 目录</span><br><span class=\"line\"></span><br><span class=\"line\">* [前言](README.md)</span><br><span class=\"line\">* [第一章](Chapter1/README.md)</span><br><span class=\"line\">  * [第1节：衣](Chapter1/衣.md)</span><br><span class=\"line\">  * [第2节：食](Chapter1/食.md)</span><br><span class=\"line\">  * [第3节：住](Chapter1/住.md)</span><br><span class=\"line\">  * [第4节：行](Chapter1/行.md)</span><br><span class=\"line\">* [第二章](Chapter2/README.md)</span><br><span class=\"line\">* [第三章](Chapter3/README.md)</span><br><span class=\"line\">* [第四章](Chapter4/README.md)</span><br></pre></td></tr></table></figure></p>\n<p>然后我们回到命令行，在 mybook 文件夹中再次执行 gitbook init 命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。</p>\n<p>接着我们执行:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitbook serve</span><br></pre></td></tr></table></figure></p>\n<p>Serving book on <a href=\"http://localhost:4000”。嗯，打开浏览器看一下吧：\" target=\"_blank\" rel=\"noopener\">http://localhost:4000”。嗯，打开浏览器看一下吧：</a></p>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/8.png\" alt=\"blockchain\"></p>\n<blockquote>\n<p>Typora软件可以将.md文件转化为pdf,word等好多种类型的文件。</p>\n</blockquote>"},{"title":"小程序实现签名并保存图片","date":"2019-02-21T01:17:20.000Z","_content":"\n### 前言\n#### 小程序实现签名并保存图片，主要的通过canvas来实现\n\n```html\n<!--pages/sign/sign.wxml-->\n<view class='container'>\n<!-- 签名画布 -->\n<canvas class=\"canvas\" id=\"canvas\" canvas-id=\"canvas\" disable-scroll=\"true\" bindtouchstart=\"canvasStart\" bindtouchmove=\"canvasMove\" bindtouchend=\"canvasEnd\" touchcancel=\"canvasEnd\" binderror=\"canvasIdErrorCallback\">\n</canvas>\n<view class='buttonBox'>\n<button bindtap='clickMe' class='addbutton' open-type=\"getuserinfo\">点击我生成图片保存相册</button>\n<button type=\"default\" class='delbutton' bindtap=\"cleardraw\">清除</button>\n</view>\n</view>\n```\n<!-- more -->\n```css\n/* pages/sign/sign.wxss */\n.canvas {\n  width: 100%;\n  height: 93%;\n  border-bottom: 1rpx solid #e2e2e2e2;  \n  position: fixed;\n  box-sizing: border-box;\n} \n.imageCanvas{\n  width: 100%;\n  height: 300rpx;\n}\n.buttonBox{\n  width: 100%;\n  justify-content: center;\n  display: flex;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n}\n```\n\n```javascript\n// canvas 全局配置\nvar context = null;\nvar isButtonDown = false;\nvar arrx = [];\nvar arry = [];\nvar arrz = [];\nvar canvasw = 0;\nvar canvash = 0;\n//注册页面\nPage({\ncanvasIdErrorCallback: function (e) {\nconsole.error(e.detail.errMsg)\n},\n//开始\ncanvasStart: function (event) {\nconsole.log(\"start\", event.changedTouches[0])\nisButtonDown = true;\narrz.push(0);\narrx.push(event.changedTouches[0].x);\narry.push(event.changedTouches[0].y);\nconsole.log(\"\")\n},\ndata: {\nsrc: \"\",\nimg: \"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=578899140,1412678472&fm=27&gp=0.jpg\",\nrpx: ''\n},\n\nonLoad: function (options) {\nvar that = this\n// 使用 wx.createContext 获取绘图上下文 context\ncontext = wx.createCanvasContext('canvas');\ncontext.beginPath()\ncontext.setStrokeStyle('#000000');\ncontext.setLineWidth(4);\ncontext.setLineCap('round');\ncontext.setLineJoin('round');\n\n// context.drawImage('../../images/img111.png', 0, 0, canvasw, 500);\ncontext.draw();\n},\n\n//过程\ncanvasMove: function (event) {\nvar that = this\nif (isButtonDown) {\narrz.push(1);\nconsole.log(event)\narrx.push(event.changedTouches[0].x);\narry.push(event.changedTouches[0].y);\n};\n\nfor (var i = 0; i < arrx.length; i++) {\nif (arrz[i] == 0) {\ncontext.moveTo(arrx[i], arry[i])\n} else {\ncontext.lineTo(arrx[i], arry[i])\n};\n\n};\ncontext.clearRect(0, 0, canvasw, canvash);\ncontext.setStrokeStyle('#000000');\ncontext.setLineWidth(4);\ncontext.setLineCap('round');\ncontext.setLineJoin('round');\ncontext.stroke();\n\ncontext.draw(false);\n},\n// 点击保存图片\nclickMe: function () {\nwx.canvasToTempFilePath({\ncanvasId: 'canvas',\nfileType: 'jpg',\nsuccess: function (res) {\nconsole.log(res)\nwx.saveImageToPhotosAlbum({\nfilePath: res.tempFilePath,\nsuccess(res) {\nconsole.log(res)\nwx.hideLoading();\nwx.showToast({\ntitle: '保存成功',\n});\n// //存入服务器\n// wx.uploadFile({\n//   url: 'a.php', //接口地址\n//   filePath: res.tempFilePath,\n//   name: 'file',\n//   formData: {                                 //HTTP 请求中其他额外的 form data \n//     'user': 'test'\n//   },\n//   success: function (res) {\n//     console.log(res);\n\n//   },\n//   fail: function (res) {\n//     console.log(res);\n//   },\n//   complete: function (res) {\n//   }\n// });\n},\nfail() {\nwx.hideLoading()\n}\n})\n}\n})\n},\ncanvasEnd: function (event) {\nisButtonDown = false;\n},\ncleardraw: function () {\n//清除画布\narrx = [];\narry = [];\narrz = [];\ncontext.draw(false);\n}\n})\n```","source":"_posts/jc-2.md","raw":"---\ntitle: 小程序实现签名并保存图片\ndate: 2019-02-21 09:17:20\ncategories: gc-end\n---\n\n### 前言\n#### 小程序实现签名并保存图片，主要的通过canvas来实现\n\n```html\n<!--pages/sign/sign.wxml-->\n<view class='container'>\n<!-- 签名画布 -->\n<canvas class=\"canvas\" id=\"canvas\" canvas-id=\"canvas\" disable-scroll=\"true\" bindtouchstart=\"canvasStart\" bindtouchmove=\"canvasMove\" bindtouchend=\"canvasEnd\" touchcancel=\"canvasEnd\" binderror=\"canvasIdErrorCallback\">\n</canvas>\n<view class='buttonBox'>\n<button bindtap='clickMe' class='addbutton' open-type=\"getuserinfo\">点击我生成图片保存相册</button>\n<button type=\"default\" class='delbutton' bindtap=\"cleardraw\">清除</button>\n</view>\n</view>\n```\n<!-- more -->\n```css\n/* pages/sign/sign.wxss */\n.canvas {\n  width: 100%;\n  height: 93%;\n  border-bottom: 1rpx solid #e2e2e2e2;  \n  position: fixed;\n  box-sizing: border-box;\n} \n.imageCanvas{\n  width: 100%;\n  height: 300rpx;\n}\n.buttonBox{\n  width: 100%;\n  justify-content: center;\n  display: flex;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n}\n```\n\n```javascript\n// canvas 全局配置\nvar context = null;\nvar isButtonDown = false;\nvar arrx = [];\nvar arry = [];\nvar arrz = [];\nvar canvasw = 0;\nvar canvash = 0;\n//注册页面\nPage({\ncanvasIdErrorCallback: function (e) {\nconsole.error(e.detail.errMsg)\n},\n//开始\ncanvasStart: function (event) {\nconsole.log(\"start\", event.changedTouches[0])\nisButtonDown = true;\narrz.push(0);\narrx.push(event.changedTouches[0].x);\narry.push(event.changedTouches[0].y);\nconsole.log(\"\")\n},\ndata: {\nsrc: \"\",\nimg: \"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=578899140,1412678472&fm=27&gp=0.jpg\",\nrpx: ''\n},\n\nonLoad: function (options) {\nvar that = this\n// 使用 wx.createContext 获取绘图上下文 context\ncontext = wx.createCanvasContext('canvas');\ncontext.beginPath()\ncontext.setStrokeStyle('#000000');\ncontext.setLineWidth(4);\ncontext.setLineCap('round');\ncontext.setLineJoin('round');\n\n// context.drawImage('../../images/img111.png', 0, 0, canvasw, 500);\ncontext.draw();\n},\n\n//过程\ncanvasMove: function (event) {\nvar that = this\nif (isButtonDown) {\narrz.push(1);\nconsole.log(event)\narrx.push(event.changedTouches[0].x);\narry.push(event.changedTouches[0].y);\n};\n\nfor (var i = 0; i < arrx.length; i++) {\nif (arrz[i] == 0) {\ncontext.moveTo(arrx[i], arry[i])\n} else {\ncontext.lineTo(arrx[i], arry[i])\n};\n\n};\ncontext.clearRect(0, 0, canvasw, canvash);\ncontext.setStrokeStyle('#000000');\ncontext.setLineWidth(4);\ncontext.setLineCap('round');\ncontext.setLineJoin('round');\ncontext.stroke();\n\ncontext.draw(false);\n},\n// 点击保存图片\nclickMe: function () {\nwx.canvasToTempFilePath({\ncanvasId: 'canvas',\nfileType: 'jpg',\nsuccess: function (res) {\nconsole.log(res)\nwx.saveImageToPhotosAlbum({\nfilePath: res.tempFilePath,\nsuccess(res) {\nconsole.log(res)\nwx.hideLoading();\nwx.showToast({\ntitle: '保存成功',\n});\n// //存入服务器\n// wx.uploadFile({\n//   url: 'a.php', //接口地址\n//   filePath: res.tempFilePath,\n//   name: 'file',\n//   formData: {                                 //HTTP 请求中其他额外的 form data \n//     'user': 'test'\n//   },\n//   success: function (res) {\n//     console.log(res);\n\n//   },\n//   fail: function (res) {\n//     console.log(res);\n//   },\n//   complete: function (res) {\n//   }\n// });\n},\nfail() {\nwx.hideLoading()\n}\n})\n}\n})\n},\ncanvasEnd: function (event) {\nisButtonDown = false;\n},\ncleardraw: function () {\n//清除画布\narrx = [];\narry = [];\narrz = [];\ncontext.draw(false);\n}\n})\n```","slug":"jc-2","published":1,"updated":"2019-06-02T07:33:58.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0c000254s6b7g8jlnm","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><h4 id=\"小程序实现签名并保存图片，主要的通过canvas来实现\"><a href=\"#小程序实现签名并保存图片，主要的通过canvas来实现\" class=\"headerlink\" title=\"小程序实现签名并保存图片，主要的通过canvas来实现\"></a>小程序实现签名并保存图片，主要的通过canvas来实现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--pages/sign/sign.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'container'</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 签名画布 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">class</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">disable-scroll</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">bindtouchstart</span>=<span class=\"string\">\"canvasStart\"</span> <span class=\"attr\">bindtouchmove</span>=<span class=\"string\">\"canvasMove\"</span> <span class=\"attr\">bindtouchend</span>=<span class=\"string\">\"canvasEnd\"</span> <span class=\"attr\">touchcancel</span>=<span class=\"string\">\"canvasEnd\"</span> <span class=\"attr\">binderror</span>=<span class=\"string\">\"canvasIdErrorCallback\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'buttonBox'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">'clickMe'</span> <span class=\"attr\">class</span>=<span class=\"string\">'addbutton'</span> <span class=\"attr\">open-type</span>=<span class=\"string\">\"getuserinfo\"</span>&gt;</span>点击我生成图片保存相册<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">class</span>=<span class=\"string\">'delbutton'</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"cleardraw\"</span>&gt;</span>清除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* pages/sign/sign.wxss */</span></span><br><span class=\"line\"><span class=\"selector-class\">.canvas</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">93%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1</span>rpx solid <span class=\"number\">#e2e2e2e2</span>;  </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.imageCanvas</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.buttonBox</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// canvas 全局配置</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isButtonDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrx = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrz = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvasw = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvash = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//注册页面</span></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">canvasIdErrorCallback: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.error(e.detail.errMsg)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">//开始</span></span><br><span class=\"line\">canvasStart: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>, event.changedTouches[<span class=\"number\">0</span>])</span><br><span class=\"line\">isButtonDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">arrz.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">arrx.push(event.changedTouches[<span class=\"number\">0</span>].x);</span><br><span class=\"line\">arry.push(event.changedTouches[<span class=\"number\">0</span>].y);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">src: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">img: <span class=\"string\">\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=578899140,1412678472&amp;fm=27&amp;gp=0.jpg\"</span>,</span><br><span class=\"line\">rpx: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">onLoad: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 wx.createContext 获取绘图上下文 context</span></span><br><span class=\"line\">context = wx.createCanvasContext(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">context.beginPath()</span><br><span class=\"line\">context.setStrokeStyle(<span class=\"string\">'#000000'</span>);</span><br><span class=\"line\">context.setLineWidth(<span class=\"number\">4</span>);</span><br><span class=\"line\">context.setLineCap(<span class=\"string\">'round'</span>);</span><br><span class=\"line\">context.setLineJoin(<span class=\"string\">'round'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// context.drawImage('../../images/img111.png', 0, 0, canvasw, 500);</span></span><br><span class=\"line\">context.draw();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过程</span></span><br><span class=\"line\">canvasMove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isButtonDown) &#123;</span><br><span class=\"line\">arrz.push(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(event)</span><br><span class=\"line\">arrx.push(event.changedTouches[<span class=\"number\">0</span>].x);</span><br><span class=\"line\">arry.push(event.changedTouches[<span class=\"number\">0</span>].y);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arrx.length; i++) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (arrz[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">context.moveTo(arrx[i], arry[i])</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">context.lineTo(arrx[i], arry[i])</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">context.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvasw, canvash);</span><br><span class=\"line\">context.setStrokeStyle(<span class=\"string\">'#000000'</span>);</span><br><span class=\"line\">context.setLineWidth(<span class=\"number\">4</span>);</span><br><span class=\"line\">context.setLineCap(<span class=\"string\">'round'</span>);</span><br><span class=\"line\">context.setLineJoin(<span class=\"string\">'round'</span>);</span><br><span class=\"line\">context.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">context.draw(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 点击保存图片</span></span><br><span class=\"line\">clickMe: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">wx.canvasToTempFilePath(&#123;</span><br><span class=\"line\">canvasId: <span class=\"string\">'canvas'</span>,</span><br><span class=\"line\">fileType: <span class=\"string\">'jpg'</span>,</span><br><span class=\"line\">success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">wx.saveImageToPhotosAlbum(&#123;</span><br><span class=\"line\">filePath: res.tempFilePath,</span><br><span class=\"line\">success(res) &#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">wx.hideLoading();</span><br><span class=\"line\">wx.showToast(&#123;</span><br><span class=\"line\">title: <span class=\"string\">'保存成功'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// //存入服务器</span></span><br><span class=\"line\"><span class=\"comment\">// wx.uploadFile(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   url: 'a.php', //接口地址</span></span><br><span class=\"line\"><span class=\"comment\">//   filePath: res.tempFilePath,</span></span><br><span class=\"line\"><span class=\"comment\">//   name: 'file',</span></span><br><span class=\"line\"><span class=\"comment\">//   formData: &#123;                                 //HTTP 请求中其他额外的 form data </span></span><br><span class=\"line\"><span class=\"comment\">//     'user': 'test'</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   success: function (res) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   fail: function (res) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   complete: function (res) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">fail() &#123;</span><br><span class=\"line\">wx.hideLoading()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">canvasEnd: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">isButtonDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">cleardraw: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//清除画布</span></span><br><span class=\"line\">arrx = [];</span><br><span class=\"line\">arry = [];</span><br><span class=\"line\">arrz = [];</span><br><span class=\"line\">context.draw(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><h4 id=\"小程序实现签名并保存图片，主要的通过canvas来实现\"><a href=\"#小程序实现签名并保存图片，主要的通过canvas来实现\" class=\"headerlink\" title=\"小程序实现签名并保存图片，主要的通过canvas来实现\"></a>小程序实现签名并保存图片，主要的通过canvas来实现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--pages/sign/sign.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'container'</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 签名画布 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">class</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">canvas-id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">disable-scroll</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">bindtouchstart</span>=<span class=\"string\">\"canvasStart\"</span> <span class=\"attr\">bindtouchmove</span>=<span class=\"string\">\"canvasMove\"</span> <span class=\"attr\">bindtouchend</span>=<span class=\"string\">\"canvasEnd\"</span> <span class=\"attr\">touchcancel</span>=<span class=\"string\">\"canvasEnd\"</span> <span class=\"attr\">binderror</span>=<span class=\"string\">\"canvasIdErrorCallback\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'buttonBox'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">'clickMe'</span> <span class=\"attr\">class</span>=<span class=\"string\">'addbutton'</span> <span class=\"attr\">open-type</span>=<span class=\"string\">\"getuserinfo\"</span>&gt;</span>点击我生成图片保存相册<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">class</span>=<span class=\"string\">'delbutton'</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"cleardraw\"</span>&gt;</span>清除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* pages/sign/sign.wxss */</span></span><br><span class=\"line\"><span class=\"selector-class\">.canvas</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">93%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1</span>rpx solid <span class=\"number\">#e2e2e2e2</span>;  </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.imageCanvas</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.buttonBox</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// canvas 全局配置</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isButtonDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrx = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrz = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvasw = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvash = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//注册页面</span></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">canvasIdErrorCallback: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.error(e.detail.errMsg)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">//开始</span></span><br><span class=\"line\">canvasStart: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>, event.changedTouches[<span class=\"number\">0</span>])</span><br><span class=\"line\">isButtonDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">arrz.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">arrx.push(event.changedTouches[<span class=\"number\">0</span>].x);</span><br><span class=\"line\">arry.push(event.changedTouches[<span class=\"number\">0</span>].y);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">src: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">img: <span class=\"string\">\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=578899140,1412678472&amp;fm=27&amp;gp=0.jpg\"</span>,</span><br><span class=\"line\">rpx: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">onLoad: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 wx.createContext 获取绘图上下文 context</span></span><br><span class=\"line\">context = wx.createCanvasContext(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">context.beginPath()</span><br><span class=\"line\">context.setStrokeStyle(<span class=\"string\">'#000000'</span>);</span><br><span class=\"line\">context.setLineWidth(<span class=\"number\">4</span>);</span><br><span class=\"line\">context.setLineCap(<span class=\"string\">'round'</span>);</span><br><span class=\"line\">context.setLineJoin(<span class=\"string\">'round'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// context.drawImage('../../images/img111.png', 0, 0, canvasw, 500);</span></span><br><span class=\"line\">context.draw();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过程</span></span><br><span class=\"line\">canvasMove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isButtonDown) &#123;</span><br><span class=\"line\">arrz.push(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(event)</span><br><span class=\"line\">arrx.push(event.changedTouches[<span class=\"number\">0</span>].x);</span><br><span class=\"line\">arry.push(event.changedTouches[<span class=\"number\">0</span>].y);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arrx.length; i++) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (arrz[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">context.moveTo(arrx[i], arry[i])</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">context.lineTo(arrx[i], arry[i])</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">context.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvasw, canvash);</span><br><span class=\"line\">context.setStrokeStyle(<span class=\"string\">'#000000'</span>);</span><br><span class=\"line\">context.setLineWidth(<span class=\"number\">4</span>);</span><br><span class=\"line\">context.setLineCap(<span class=\"string\">'round'</span>);</span><br><span class=\"line\">context.setLineJoin(<span class=\"string\">'round'</span>);</span><br><span class=\"line\">context.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">context.draw(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 点击保存图片</span></span><br><span class=\"line\">clickMe: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">wx.canvasToTempFilePath(&#123;</span><br><span class=\"line\">canvasId: <span class=\"string\">'canvas'</span>,</span><br><span class=\"line\">fileType: <span class=\"string\">'jpg'</span>,</span><br><span class=\"line\">success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">wx.saveImageToPhotosAlbum(&#123;</span><br><span class=\"line\">filePath: res.tempFilePath,</span><br><span class=\"line\">success(res) &#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">wx.hideLoading();</span><br><span class=\"line\">wx.showToast(&#123;</span><br><span class=\"line\">title: <span class=\"string\">'保存成功'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// //存入服务器</span></span><br><span class=\"line\"><span class=\"comment\">// wx.uploadFile(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   url: 'a.php', //接口地址</span></span><br><span class=\"line\"><span class=\"comment\">//   filePath: res.tempFilePath,</span></span><br><span class=\"line\"><span class=\"comment\">//   name: 'file',</span></span><br><span class=\"line\"><span class=\"comment\">//   formData: &#123;                                 //HTTP 请求中其他额外的 form data </span></span><br><span class=\"line\"><span class=\"comment\">//     'user': 'test'</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   success: function (res) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   fail: function (res) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   complete: function (res) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">fail() &#123;</span><br><span class=\"line\">wx.hideLoading()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">canvasEnd: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">isButtonDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">cleardraw: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//清除画布</span></span><br><span class=\"line\">arrx = [];</span><br><span class=\"line\">arry = [];</span><br><span class=\"line\">arrz = [];</span><br><span class=\"line\">context.draw(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"git把功能开发错了分支莫慌/恢复误删的本地分支","date":"2018-09-11T07:32:20.000Z","_content":"\n开发风风火火，功能开发完了，git branch一看，靠，在线上分支开发的，顿时瘫坐在椅子上，还得复制代码？不用，几步搞定，顿时觉得git是天下最伟大的发明。\n\n### 第一种场景：\n\n你开发的功能还没有提交代码，像我这种喜欢开发完一次性提交的人会经常用到，这种习惯其实是不好的。\n\n```shell\ngit add .  // 把所有改动放到暂存\ngit stash  // 把暂存的文件提交到git的暂存栈\ngit checkout 本该提交代码的分支  // 切换到正确的分支\ngit stash pop  // 将暂存栈中的代码放出来\n```\n<!-- more -->\n### 第二种场景：\n\n其实最常见的是这种问题，特别是喜欢用idea插件的童鞋，一顿操作猛如虎，一看结果心里哭。git  checkout 不该提交代码提交了代码的分支\n\n```shell\ngit reset HEAD~1 // 最近一次提交放回暂存区, 并取消此次提交\ngit stash // 把暂存的文件提交到git的暂存栈\ngit checkout 该提交代码的分支\ngit stash pop\n```\n\n下面一顿操作随你猛了，等你把代码提交到了正确的分支后，再次切到刚刚错的分支\n\n```shell\ngit push origin 错误的分支 -f  (把不该上去的文件回退掉)\n```\n\n## 恢复误删的本地分支\n\n```shell\ngit log -g // 找回之前提交的commit,并记下commit_id\ngit branch newbranch commit_id // 切换到newbranch分支，检查文件是否存在\n```\n","source":"_posts/jc-3.md","raw":"---\ntitle: git把功能开发错了分支莫慌/恢复误删的本地分支\ndate: 2018-09-11 15:32:20\ncategories: gc-end\n---\n\n开发风风火火，功能开发完了，git branch一看，靠，在线上分支开发的，顿时瘫坐在椅子上，还得复制代码？不用，几步搞定，顿时觉得git是天下最伟大的发明。\n\n### 第一种场景：\n\n你开发的功能还没有提交代码，像我这种喜欢开发完一次性提交的人会经常用到，这种习惯其实是不好的。\n\n```shell\ngit add .  // 把所有改动放到暂存\ngit stash  // 把暂存的文件提交到git的暂存栈\ngit checkout 本该提交代码的分支  // 切换到正确的分支\ngit stash pop  // 将暂存栈中的代码放出来\n```\n<!-- more -->\n### 第二种场景：\n\n其实最常见的是这种问题，特别是喜欢用idea插件的童鞋，一顿操作猛如虎，一看结果心里哭。git  checkout 不该提交代码提交了代码的分支\n\n```shell\ngit reset HEAD~1 // 最近一次提交放回暂存区, 并取消此次提交\ngit stash // 把暂存的文件提交到git的暂存栈\ngit checkout 该提交代码的分支\ngit stash pop\n```\n\n下面一顿操作随你猛了，等你把代码提交到了正确的分支后，再次切到刚刚错的分支\n\n```shell\ngit push origin 错误的分支 -f  (把不该上去的文件回退掉)\n```\n\n## 恢复误删的本地分支\n\n```shell\ngit log -g // 找回之前提交的commit,并记下commit_id\ngit branch newbranch commit_id // 切换到newbranch分支，检查文件是否存在\n```\n","slug":"jc-3","published":1,"updated":"2019-06-03T07:57:01.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0g000454s6lffpkbcd","content":"<p>开发风风火火，功能开发完了，git branch一看，靠，在线上分支开发的，顿时瘫坐在椅子上，还得复制代码？不用，几步搞定，顿时觉得git是天下最伟大的发明。</p>\n<h3 id=\"第一种场景：\"><a href=\"#第一种场景：\" class=\"headerlink\" title=\"第一种场景：\"></a>第一种场景：</h3><p>你开发的功能还没有提交代码，像我这种喜欢开发完一次性提交的人会经常用到，这种习惯其实是不好的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .  // 把所有改动放到暂存</span><br><span class=\"line\">git stash  // 把暂存的文件提交到git的暂存栈</span><br><span class=\"line\">git checkout 本该提交代码的分支  // 切换到正确的分支</span><br><span class=\"line\">git stash pop  // 将暂存栈中的代码放出来</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"第二种场景：\"><a href=\"#第二种场景：\" class=\"headerlink\" title=\"第二种场景：\"></a>第二种场景：</h3><p>其实最常见的是这种问题，特别是喜欢用idea插件的童鞋，一顿操作猛如虎，一看结果心里哭。git  checkout 不该提交代码提交了代码的分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD~1 // 最近一次提交放回暂存区, 并取消此次提交</span><br><span class=\"line\">git stash // 把暂存的文件提交到git的暂存栈</span><br><span class=\"line\">git checkout 该提交代码的分支</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<p>下面一顿操作随你猛了，等你把代码提交到了正确的分支后，再次切到刚刚错的分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin 错误的分支 -f  (把不该上去的文件回退掉)</span><br></pre></td></tr></table></figure>\n<h2 id=\"恢复误删的本地分支\"><a href=\"#恢复误删的本地分支\" class=\"headerlink\" title=\"恢复误删的本地分支\"></a>恢复误删的本地分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -g // 找回之前提交的commit,并记下commit_id</span><br><span class=\"line\">git branch newbranch commit_id // 切换到newbranch分支，检查文件是否存在</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>开发风风火火，功能开发完了，git branch一看，靠，在线上分支开发的，顿时瘫坐在椅子上，还得复制代码？不用，几步搞定，顿时觉得git是天下最伟大的发明。</p>\n<h3 id=\"第一种场景：\"><a href=\"#第一种场景：\" class=\"headerlink\" title=\"第一种场景：\"></a>第一种场景：</h3><p>你开发的功能还没有提交代码，像我这种喜欢开发完一次性提交的人会经常用到，这种习惯其实是不好的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .  // 把所有改动放到暂存</span><br><span class=\"line\">git stash  // 把暂存的文件提交到git的暂存栈</span><br><span class=\"line\">git checkout 本该提交代码的分支  // 切换到正确的分支</span><br><span class=\"line\">git stash pop  // 将暂存栈中的代码放出来</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"第二种场景：\"><a href=\"#第二种场景：\" class=\"headerlink\" title=\"第二种场景：\"></a>第二种场景：</h3><p>其实最常见的是这种问题，特别是喜欢用idea插件的童鞋，一顿操作猛如虎，一看结果心里哭。git  checkout 不该提交代码提交了代码的分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD~1 // 最近一次提交放回暂存区, 并取消此次提交</span><br><span class=\"line\">git stash // 把暂存的文件提交到git的暂存栈</span><br><span class=\"line\">git checkout 该提交代码的分支</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<p>下面一顿操作随你猛了，等你把代码提交到了正确的分支后，再次切到刚刚错的分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin 错误的分支 -f  (把不该上去的文件回退掉)</span><br></pre></td></tr></table></figure>\n<h2 id=\"恢复误删的本地分支\"><a href=\"#恢复误删的本地分支\" class=\"headerlink\" title=\"恢复误删的本地分支\"></a>恢复误删的本地分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -g // 找回之前提交的commit,并记下commit_id</span><br><span class=\"line\">git branch newbranch commit_id // 切换到newbranch分支，检查文件是否存在</span><br></pre></td></tr></table></figure>"},{"title":"JS replace()方法全文替换，遇到变量怎么办？","date":"2018-05-23T08:14:16.000Z","_content":"\n> replace 替换变量文本，改如何处理？\n\n### js 替换字符窜，一般情况下是\n```javascript\nlet string = \"aaabbbsssf\";\nlet a = string.replace(\"a\",\"我\");\n```\n<!-- more -->\n#### 以上只能替换第一个，全局替换\n```javascript\nlet string = \"aaabbbsssf\";\nlet a = string.replace(/a/g,\"我\");\n```\n#### 这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？\n\n#### 以上只能替换第一个，全局替换\n```javascript\nlet string = \"aaabbbsssf\";\nlet key = \"a\";\nlet a = string.replace(/key/g,\"我\");\n或者\nlet a = string.replace(/\\key/g,\"我\");\n再或者拼接？\n```\n\n##### 经过我的各种奇怪尝试都是不好使的，没办法，查看文档：\n\n```javascript\nreplace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。\n​\n​stringObject.replace(regexp/substr,replacement)\n​\n​regexp/substr：必需。规定子字符串或要替换的模式的 RegExp 对象。\n                请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。\nreplacement：必需。一个字符串值。规定了替换文本或生成替换文本的函数。\n```\n\n##### 是不是有点明白了，对了就是\n\n```javascript\nlet string = \"aaabbbsssf\";\nlet key = \"a\";\nlet a = string.replace(new RegExp(key,'g'),\"我\");\n```\n\n\n","source":"_posts/jc-4.md","raw":"---\ntitle: JS replace()方法全文替换，遇到变量怎么办？\ndate: 2018-05-23 16:14:16\ncategories: js-end\n---\n\n> replace 替换变量文本，改如何处理？\n\n### js 替换字符窜，一般情况下是\n```javascript\nlet string = \"aaabbbsssf\";\nlet a = string.replace(\"a\",\"我\");\n```\n<!-- more -->\n#### 以上只能替换第一个，全局替换\n```javascript\nlet string = \"aaabbbsssf\";\nlet a = string.replace(/a/g,\"我\");\n```\n#### 这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？\n\n#### 以上只能替换第一个，全局替换\n```javascript\nlet string = \"aaabbbsssf\";\nlet key = \"a\";\nlet a = string.replace(/key/g,\"我\");\n或者\nlet a = string.replace(/\\key/g,\"我\");\n再或者拼接？\n```\n\n##### 经过我的各种奇怪尝试都是不好使的，没办法，查看文档：\n\n```javascript\nreplace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。\n​\n​stringObject.replace(regexp/substr,replacement)\n​\n​regexp/substr：必需。规定子字符串或要替换的模式的 RegExp 对象。\n                请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。\nreplacement：必需。一个字符串值。规定了替换文本或生成替换文本的函数。\n```\n\n##### 是不是有点明白了，对了就是\n\n```javascript\nlet string = \"aaabbbsssf\";\nlet key = \"a\";\nlet a = string.replace(new RegExp(key,'g'),\"我\");\n```\n\n\n","slug":"jc-4","published":1,"updated":"2019-06-03T08:39:33.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0h000554s6gmxvok3e","content":"<blockquote>\n<p>replace 替换变量文本，改如何处理？</p>\n</blockquote>\n<h3 id=\"js-替换字符窜，一般情况下是\"><a href=\"#js-替换字符窜，一般情况下是\" class=\"headerlink\" title=\"js 替换字符窜，一般情况下是\"></a>js 替换字符窜，一般情况下是</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">\"aaabbbsssf\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"我\"</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"以上只能替换第一个，全局替换\"><a href=\"#以上只能替换第一个，全局替换\" class=\"headerlink\" title=\"以上只能替换第一个，全局替换\"></a>以上只能替换第一个，全局替换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">\"aaabbbsssf\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"regexp\">/a/g</span>,<span class=\"string\">\"我\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？\"><a href=\"#这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？\" class=\"headerlink\" title=\"这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？\"></a>这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？</h4><h4 id=\"以上只能替换第一个，全局替换-1\"><a href=\"#以上只能替换第一个，全局替换-1\" class=\"headerlink\" title=\"以上只能替换第一个，全局替换\"></a>以上只能替换第一个，全局替换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">\"aaabbbsssf\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"regexp\">/key/g</span>,<span class=\"string\">\"我\"</span>);</span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"regexp\">/\\key/g</span>,<span class=\"string\">\"我\"</span>);</span><br><span class=\"line\">再或者拼接？</span><br></pre></td></tr></table></figure>\n<h5 id=\"经过我的各种奇怪尝试都是不好使的，没办法，查看文档：\"><a href=\"#经过我的各种奇怪尝试都是不好使的，没办法，查看文档：\" class=\"headerlink\" title=\"经过我的各种奇怪尝试都是不好使的，没办法，查看文档：\"></a>经过我的各种奇怪尝试都是不好使的，没办法，查看文档：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</span><br><span class=\"line\">​</span><br><span class=\"line\">​stringObject.replace(regexp/substr,replacement)</span><br><span class=\"line\">​</span><br><span class=\"line\">​regexp/substr：必需。规定子字符串或要替换的模式的 <span class=\"built_in\">RegExp</span> 对象。</span><br><span class=\"line\">                请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 <span class=\"built_in\">RegExp</span> 对象。</span><br><span class=\"line\">replacement：必需。一个字符串值。规定了替换文本或生成替换文本的函数。</span><br></pre></td></tr></table></figure>\n<h5 id=\"是不是有点明白了，对了就是\"><a href=\"#是不是有点明白了，对了就是\" class=\"headerlink\" title=\"是不是有点明白了，对了就是\"></a>是不是有点明白了，对了就是</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">\"aaabbbsssf\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(key,<span class=\"string\">'g'</span>),<span class=\"string\">\"我\"</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>replace 替换变量文本，改如何处理？</p>\n</blockquote>\n<h3 id=\"js-替换字符窜，一般情况下是\"><a href=\"#js-替换字符窜，一般情况下是\" class=\"headerlink\" title=\"js 替换字符窜，一般情况下是\"></a>js 替换字符窜，一般情况下是</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">\"aaabbbsssf\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"我\"</span>);</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"以上只能替换第一个，全局替换\"><a href=\"#以上只能替换第一个，全局替换\" class=\"headerlink\" title=\"以上只能替换第一个，全局替换\"></a>以上只能替换第一个，全局替换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">\"aaabbbsssf\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"regexp\">/a/g</span>,<span class=\"string\">\"我\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？\"><a href=\"#这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？\" class=\"headerlink\" title=\"这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？\"></a>这样没问题，但是如果需要替换的字段不确定，是变量的话，如何写？</h4><h4 id=\"以上只能替换第一个，全局替换-1\"><a href=\"#以上只能替换第一个，全局替换-1\" class=\"headerlink\" title=\"以上只能替换第一个，全局替换\"></a>以上只能替换第一个，全局替换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">\"aaabbbsssf\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"regexp\">/key/g</span>,<span class=\"string\">\"我\"</span>);</span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"regexp\">/\\key/g</span>,<span class=\"string\">\"我\"</span>);</span><br><span class=\"line\">再或者拼接？</span><br></pre></td></tr></table></figure>\n<h5 id=\"经过我的各种奇怪尝试都是不好使的，没办法，查看文档：\"><a href=\"#经过我的各种奇怪尝试都是不好使的，没办法，查看文档：\" class=\"headerlink\" title=\"经过我的各种奇怪尝试都是不好使的，没办法，查看文档：\"></a>经过我的各种奇怪尝试都是不好使的，没办法，查看文档：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</span><br><span class=\"line\">​</span><br><span class=\"line\">​stringObject.replace(regexp/substr,replacement)</span><br><span class=\"line\">​</span><br><span class=\"line\">​regexp/substr：必需。规定子字符串或要替换的模式的 <span class=\"built_in\">RegExp</span> 对象。</span><br><span class=\"line\">                请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 <span class=\"built_in\">RegExp</span> 对象。</span><br><span class=\"line\">replacement：必需。一个字符串值。规定了替换文本或生成替换文本的函数。</span><br></pre></td></tr></table></figure>\n<h5 id=\"是不是有点明白了，对了就是\"><a href=\"#是不是有点明白了，对了就是\" class=\"headerlink\" title=\"是不是有点明白了，对了就是\"></a>是不是有点明白了，对了就是</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">\"aaabbbsssf\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = string.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(key,<span class=\"string\">'g'</span>),<span class=\"string\">\"我\"</span>);</span><br></pre></td></tr></table></figure>"},{"title":"文本溢出显示... 和文本的断点换行","date":"2017-12-14T03:32:00.000Z","_content":"\n文本的显示在前端算是比较X疼的一件事，如何处理断行和在手机端的显示内容呢？\n\n### 文本换行 断点\n\n```css\nword-break:  属性规定自动换行的处理方法\n         normal     使用浏览器的默认换行方式\n         break-all  允许在单词内断行\n                    在使用英文多的时候能够整齐换行\n         keep-all   只能在半角空格或连字符处换行\n\nword-wrap：  允许长单词或 URL 地址换行到下一行\n         normal      只在允许的断点处处理（按浏览器默认的处理方式）\n         break-word  在长单词或者url内部进行换行\n```\n\n<!-- more -->\n\n#### 自己的看法：\n```css\nword-wrap： 决定句尾放不下单词时，单词是否换行\nword-break: 决定单词内该怎么换行\n```\n\n#### 单行显示省略号：\n\n```css\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n```\n\n#### 多行显示省略号：\n\n```css\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 3;\noverflow: hidden;\n```","source":"_posts/jc-5.md","raw":"---\ntitle: 文本溢出显示... 和文本的断点换行\ncategories: css-end\ndate: 2017-12-14 11:32:00\n---\n\n文本的显示在前端算是比较X疼的一件事，如何处理断行和在手机端的显示内容呢？\n\n### 文本换行 断点\n\n```css\nword-break:  属性规定自动换行的处理方法\n         normal     使用浏览器的默认换行方式\n         break-all  允许在单词内断行\n                    在使用英文多的时候能够整齐换行\n         keep-all   只能在半角空格或连字符处换行\n\nword-wrap：  允许长单词或 URL 地址换行到下一行\n         normal      只在允许的断点处处理（按浏览器默认的处理方式）\n         break-word  在长单词或者url内部进行换行\n```\n\n<!-- more -->\n\n#### 自己的看法：\n```css\nword-wrap： 决定句尾放不下单词时，单词是否换行\nword-break: 决定单词内该怎么换行\n```\n\n#### 单行显示省略号：\n\n```css\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n```\n\n#### 多行显示省略号：\n\n```css\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 3;\noverflow: hidden;\n```","slug":"jc-5","published":1,"updated":"2019-06-03T08:47:54.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0i000654s66k1or0eq","content":"<p>文本的显示在前端算是比较X疼的一件事，如何处理断行和在手机端的显示内容呢？</p>\n<h3 id=\"文本换行-断点\"><a href=\"#文本换行-断点\" class=\"headerlink\" title=\"文本换行 断点\"></a>文本换行 断点</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-break</span>:  属性规定自动换行的处理方法</span><br><span class=\"line\">         <span class=\"selector-tag\">normal</span>     使用浏览器的默认换行方式</span><br><span class=\"line\">         <span class=\"selector-tag\">break-all</span>  允许在单词内断行</span><br><span class=\"line\">                    在使用英文多的时候能够整齐换行</span><br><span class=\"line\">         <span class=\"selector-tag\">keep-all</span>   只能在半角空格或连字符处换行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">word-wrap</span>：  允许长单词或 <span class=\"selector-tag\">URL</span> 地址换行到下一行</span><br><span class=\"line\">         <span class=\"selector-tag\">normal</span>      只在允许的断点处处理（按浏览器默认的处理方式）</span><br><span class=\"line\">         <span class=\"selector-tag\">break-word</span>  在长单词或者<span class=\"selector-tag\">url</span>内部进行换行</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"自己的看法：\"><a href=\"#自己的看法：\" class=\"headerlink\" title=\"自己的看法：\"></a>自己的看法：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-wrap</span>： 决定句尾放不下单词时，单词是否换行</span><br><span class=\"line\"><span class=\"selector-tag\">word-break</span>: 决定单词内该怎么换行</span><br></pre></td></tr></table></figure>\n<h4 id=\"单行显示省略号：\"><a href=\"#单行显示省略号：\" class=\"headerlink\" title=\"单行显示省略号：\"></a>单行显示省略号：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">nowrap</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多行显示省略号：\"><a href=\"#多行显示省略号：\" class=\"headerlink\" title=\"多行显示省略号：\"></a>多行显示省略号：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-line-clamp</span>: 3;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>文本的显示在前端算是比较X疼的一件事，如何处理断行和在手机端的显示内容呢？</p>\n<h3 id=\"文本换行-断点\"><a href=\"#文本换行-断点\" class=\"headerlink\" title=\"文本换行 断点\"></a>文本换行 断点</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-break</span>:  属性规定自动换行的处理方法</span><br><span class=\"line\">         <span class=\"selector-tag\">normal</span>     使用浏览器的默认换行方式</span><br><span class=\"line\">         <span class=\"selector-tag\">break-all</span>  允许在单词内断行</span><br><span class=\"line\">                    在使用英文多的时候能够整齐换行</span><br><span class=\"line\">         <span class=\"selector-tag\">keep-all</span>   只能在半角空格或连字符处换行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">word-wrap</span>：  允许长单词或 <span class=\"selector-tag\">URL</span> 地址换行到下一行</span><br><span class=\"line\">         <span class=\"selector-tag\">normal</span>      只在允许的断点处处理（按浏览器默认的处理方式）</span><br><span class=\"line\">         <span class=\"selector-tag\">break-word</span>  在长单词或者<span class=\"selector-tag\">url</span>内部进行换行</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"自己的看法：\"><a href=\"#自己的看法：\" class=\"headerlink\" title=\"自己的看法：\"></a>自己的看法：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-wrap</span>： 决定句尾放不下单词时，单词是否换行</span><br><span class=\"line\"><span class=\"selector-tag\">word-break</span>: 决定单词内该怎么换行</span><br></pre></td></tr></table></figure>\n<h4 id=\"单行显示省略号：\"><a href=\"#单行显示省略号：\" class=\"headerlink\" title=\"单行显示省略号：\"></a>单行显示省略号：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">nowrap</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多行显示省略号：\"><a href=\"#多行显示省略号：\" class=\"headerlink\" title=\"多行显示省略号：\"></a>多行显示省略号：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-line-clamp</span>: 3;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br></pre></td></tr></table></figure>"},{"title":"vue 组件之间通信","date":"2019-04-27T10:32:52.000Z","_content":"\nvue 的组件在vue框架中是特别重要的一个环节，在大型的项目中，组件显的相当的重要，这样在后期特别好维护，一块内容就是一个组件，随时随地的删除和修改不同的组件，接下来我想写一篇vuex 集中管理状态，所以在之前先简单的介绍一下vue组件之间的相互传参方式。\n\n```shell\n父传子：Props\n子传父：子：$emit(eventName)  父$on(eventName)\n父访问子：ref\n非父子组件通信:https://vuefe.cn/guide/components.html#非父子组件通信\nvue2.0 移除：1.$dispatch() 2.$broadcast() 3.events\n```\n\n<!-- more -->\n##### select.vue\n\n```javascript\n<template>\n    <div class=\"select\" id=\"app\">\n      <select-input @upup=\"setData\" :msgfromfather=\"value\"></select-input>\n      <list v-if=\"showList\" @getValue=\"getValueData\"></list>\n    </div>\n</template>\n\n<script>\nimport selectInput from '@/components/selectInput'\nimport list from '@/components/list'\n\nexport default{\n  created(){\n\n  },\n  mounted(){\n\n  },\n  data(){\n    return {\n      showList: false,\n      value:\"\"\n    }\n  },\n  computed: {\n\n  },\n  methods: {\n    setData(msg) {\n      this.showList = msg\n    },\n    getValueData(msg,msg1){\n      console.log(\"触发了这个事件了:\",msg,msg1)\n      this.value = msg\n      this.showList = msg1\n    }\n  },\n  components: {\n    selectInput,\n    list\n  }\n}\n</script>\n```\n\n###### selectInput.vue\n\n```javascript\n<template>\n    <div class=\"selectInput\">\n      <input type=\"text\" placeholder=\"请输入搜索关键字\" class=\"searchInput\" @click=\"up\" :value=\"msgfromfather\"/>\n      <button class=\"searchBtn\">搜索</button>\n    </div>\n</template>\n\n<script>\nexport default {\n  data(){\n    return {\n      showList: true\n    }\n  },\n  created(){\n\n  },\n  props: ['msgfromfather'],\n  computed: {},\n  methods: {\n    up() {\n      this.$emit('upup',this.showList); //主动触发upup方法，\n    }\n  }\n}\n</script>\n```\n\n###### list.vue\n\n```javascript\n<template>\n    <ul class=\"selectList\">\n      <li v-for=\"historyItem in history\" @click=\"getData(historyItem)\">{{historyItem}}</li>\n    </ul>\n</template>\n\n<script>\nexport default {\n  created(){\n    //组件二接受\n//    Hub.$on('change', (msg) => { //Hub接收事件\n//      console.log(msg)\n//    });\n  },\n  data() {\n    return {\n      hidden:false,\n      history:['html','css','css3','js','vue','react','php','java']\n    }\n  },\n  computed: {},\n  methods: {\n    getData(value){\n      console.log(value)\n      this.$emit('getValue',value,this.hidden); //主动触发upup方法，\n    }\n  }\n}\n</script>\n```\n以上例子主要使用了父子组件之间的相互传递\n\n---\n\n### 父传子：\n\n父组件定义一个变量\n\n```html\n<select-input @upup=\"setData\" :msgfromfather=\"value\"></select-input>\n```\n\n子组件props接受并回显\n\n```javascript\n<input type=\"text\" placeholder=\"请输入搜索关键字\" class=\"searchInput\" @click=\"up\" :value=\"msgfromfather\"/>\nexport default {\n  data(){\n    return {\n      showList: true\n    }\n  },\n  created(){\n\n  },\n  props: ['msgfromfather'],\n  computed: {},\n  methods: {\n    up() {\n      this.$emit('upup',this.showList); //主动触发upup方法，\n    }\n  }\n}\n\n```\n\n### 子传父\n\n子组件点击事件$emit触发父组件的事件，父组件事件中接受传递过来的数据\n\n#### 子组件\n\n```html\n<li v-for=\"historyItem in history\" @click=\"getData(historyItem)\">{{historyItem}}</li>\nmethods: {\n  getData(value){\n    console.log(value)\n    this.$emit('getValue',value,this.hidden); //主动触发upup方法，\n  }\n}\n```\n\n#### 父组件\n\n```html\n<list v-if=\"showList\" @getValue=\"getValueData\"></list>\ngetValueData(msg,msg1){\n  console.log(\"触发了这个事件了:\",msg,msg1)\n  this.value = msg\n  this.showList = msg1\n}\n```\n\n> 1.2.3.0新增的语法糖2.这种就不涉及到通过方法去操控父组件中的data改变，而是利用子传父的思想，把props中的属性值和父组件中的data形成捆绑，利用$emit改变子组件的data，变相改变了父组件中的data\n\n```javascript\n<div id=\"app\">\n    {{count}}    <!--子组件用来传递父组件的方法-->\n    <my-Com2 v-bind:parent-Count.sync = 'count'></my-Com2>\n</div>\n\n<template id=\"com\">\n    <!--在组件内部特意定义了一个触发父组件方法的点击事件-->\n    <button @click=\"changeParent\">操作父组件的子组件方法</button>\n</template>\n\n<script>\n    let myCom2 = {        \n        template:'#com',\n        data(){            \n        return {                \n            title:'子组件',\n            }\n        },        \n        // 父传子\n        props:['parentCount'],        \n        methods:{          \n            // 用来专门触发父组件方法子组件，用来触发$emit\n            changeParent(){                \n                // 根据上面的介绍原则等号左面的属于子组件的右面属于父组件\n                // 将父子组件data 都绑定在一起，改变子组件就是改变了父组件\n                this.$emit('update:parentCount',1000)\n            }\n        },\n    };    \n    var vm = new Vue({        \n        el: '#app',        \n        data:{          \n            count:0,\n        },        \n        components:{            \n            // 在外部声明变量，使用代码简洁\n            myCom2,\n        }\n    });\n</script>\n```\n\n---\n\n### 兄弟组件之间的通信\n\n> 如果2个组件不是父子组件那么如何通信呢？这时可以通过eventHub来实现通信. \n所谓eventHub就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件.\n\n```html\nlet Hub = new Vue(); //创建事件中心\n```\n\n组件1触发:   \n\n```html\n<div @click=\"eve\"></div>methods: {\n    eve() {\n        Hub.$emit('change','hehe'); //Hub触发事件\n    }\n}\n```\n\n组件2触发:\n\n```html\n<div></div>\ncreated() {\n    Hub.$on('change', () => { //Hub接收事件        this.msg = 'hehe';\n    });\n}\n```\n\n这样就实现了非父子组件之间的通信了.原理就是把Hub当作一个中转站！","source":"_posts/jc-6.md","raw":"---\ntitle: vue 组件之间通信\ncategories: gc-end\ndate: 2019-04-27 18:32:52\n---\n\nvue 的组件在vue框架中是特别重要的一个环节，在大型的项目中，组件显的相当的重要，这样在后期特别好维护，一块内容就是一个组件，随时随地的删除和修改不同的组件，接下来我想写一篇vuex 集中管理状态，所以在之前先简单的介绍一下vue组件之间的相互传参方式。\n\n```shell\n父传子：Props\n子传父：子：$emit(eventName)  父$on(eventName)\n父访问子：ref\n非父子组件通信:https://vuefe.cn/guide/components.html#非父子组件通信\nvue2.0 移除：1.$dispatch() 2.$broadcast() 3.events\n```\n\n<!-- more -->\n##### select.vue\n\n```javascript\n<template>\n    <div class=\"select\" id=\"app\">\n      <select-input @upup=\"setData\" :msgfromfather=\"value\"></select-input>\n      <list v-if=\"showList\" @getValue=\"getValueData\"></list>\n    </div>\n</template>\n\n<script>\nimport selectInput from '@/components/selectInput'\nimport list from '@/components/list'\n\nexport default{\n  created(){\n\n  },\n  mounted(){\n\n  },\n  data(){\n    return {\n      showList: false,\n      value:\"\"\n    }\n  },\n  computed: {\n\n  },\n  methods: {\n    setData(msg) {\n      this.showList = msg\n    },\n    getValueData(msg,msg1){\n      console.log(\"触发了这个事件了:\",msg,msg1)\n      this.value = msg\n      this.showList = msg1\n    }\n  },\n  components: {\n    selectInput,\n    list\n  }\n}\n</script>\n```\n\n###### selectInput.vue\n\n```javascript\n<template>\n    <div class=\"selectInput\">\n      <input type=\"text\" placeholder=\"请输入搜索关键字\" class=\"searchInput\" @click=\"up\" :value=\"msgfromfather\"/>\n      <button class=\"searchBtn\">搜索</button>\n    </div>\n</template>\n\n<script>\nexport default {\n  data(){\n    return {\n      showList: true\n    }\n  },\n  created(){\n\n  },\n  props: ['msgfromfather'],\n  computed: {},\n  methods: {\n    up() {\n      this.$emit('upup',this.showList); //主动触发upup方法，\n    }\n  }\n}\n</script>\n```\n\n###### list.vue\n\n```javascript\n<template>\n    <ul class=\"selectList\">\n      <li v-for=\"historyItem in history\" @click=\"getData(historyItem)\">{{historyItem}}</li>\n    </ul>\n</template>\n\n<script>\nexport default {\n  created(){\n    //组件二接受\n//    Hub.$on('change', (msg) => { //Hub接收事件\n//      console.log(msg)\n//    });\n  },\n  data() {\n    return {\n      hidden:false,\n      history:['html','css','css3','js','vue','react','php','java']\n    }\n  },\n  computed: {},\n  methods: {\n    getData(value){\n      console.log(value)\n      this.$emit('getValue',value,this.hidden); //主动触发upup方法，\n    }\n  }\n}\n</script>\n```\n以上例子主要使用了父子组件之间的相互传递\n\n---\n\n### 父传子：\n\n父组件定义一个变量\n\n```html\n<select-input @upup=\"setData\" :msgfromfather=\"value\"></select-input>\n```\n\n子组件props接受并回显\n\n```javascript\n<input type=\"text\" placeholder=\"请输入搜索关键字\" class=\"searchInput\" @click=\"up\" :value=\"msgfromfather\"/>\nexport default {\n  data(){\n    return {\n      showList: true\n    }\n  },\n  created(){\n\n  },\n  props: ['msgfromfather'],\n  computed: {},\n  methods: {\n    up() {\n      this.$emit('upup',this.showList); //主动触发upup方法，\n    }\n  }\n}\n\n```\n\n### 子传父\n\n子组件点击事件$emit触发父组件的事件，父组件事件中接受传递过来的数据\n\n#### 子组件\n\n```html\n<li v-for=\"historyItem in history\" @click=\"getData(historyItem)\">{{historyItem}}</li>\nmethods: {\n  getData(value){\n    console.log(value)\n    this.$emit('getValue',value,this.hidden); //主动触发upup方法，\n  }\n}\n```\n\n#### 父组件\n\n```html\n<list v-if=\"showList\" @getValue=\"getValueData\"></list>\ngetValueData(msg,msg1){\n  console.log(\"触发了这个事件了:\",msg,msg1)\n  this.value = msg\n  this.showList = msg1\n}\n```\n\n> 1.2.3.0新增的语法糖2.这种就不涉及到通过方法去操控父组件中的data改变，而是利用子传父的思想，把props中的属性值和父组件中的data形成捆绑，利用$emit改变子组件的data，变相改变了父组件中的data\n\n```javascript\n<div id=\"app\">\n    {{count}}    <!--子组件用来传递父组件的方法-->\n    <my-Com2 v-bind:parent-Count.sync = 'count'></my-Com2>\n</div>\n\n<template id=\"com\">\n    <!--在组件内部特意定义了一个触发父组件方法的点击事件-->\n    <button @click=\"changeParent\">操作父组件的子组件方法</button>\n</template>\n\n<script>\n    let myCom2 = {        \n        template:'#com',\n        data(){            \n        return {                \n            title:'子组件',\n            }\n        },        \n        // 父传子\n        props:['parentCount'],        \n        methods:{          \n            // 用来专门触发父组件方法子组件，用来触发$emit\n            changeParent(){                \n                // 根据上面的介绍原则等号左面的属于子组件的右面属于父组件\n                // 将父子组件data 都绑定在一起，改变子组件就是改变了父组件\n                this.$emit('update:parentCount',1000)\n            }\n        },\n    };    \n    var vm = new Vue({        \n        el: '#app',        \n        data:{          \n            count:0,\n        },        \n        components:{            \n            // 在外部声明变量，使用代码简洁\n            myCom2,\n        }\n    });\n</script>\n```\n\n---\n\n### 兄弟组件之间的通信\n\n> 如果2个组件不是父子组件那么如何通信呢？这时可以通过eventHub来实现通信. \n所谓eventHub就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件.\n\n```html\nlet Hub = new Vue(); //创建事件中心\n```\n\n组件1触发:   \n\n```html\n<div @click=\"eve\"></div>methods: {\n    eve() {\n        Hub.$emit('change','hehe'); //Hub触发事件\n    }\n}\n```\n\n组件2触发:\n\n```html\n<div></div>\ncreated() {\n    Hub.$on('change', () => { //Hub接收事件        this.msg = 'hehe';\n    });\n}\n```\n\n这样就实现了非父子组件之间的通信了.原理就是把Hub当作一个中转站！","slug":"jc-6","published":1,"updated":"2019-06-05T09:28:20.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0k000854s6w8srdzms","content":"<p>vue 的组件在vue框架中是特别重要的一个环节，在大型的项目中，组件显的相当的重要，这样在后期特别好维护，一块内容就是一个组件，随时随地的删除和修改不同的组件，接下来我想写一篇vuex 集中管理状态，所以在之前先简单的介绍一下vue组件之间的相互传参方式。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父传子：Props</span><br><span class=\"line\">子传父：子：$emit(eventName)  父$on(eventName)</span><br><span class=\"line\">父访问子：ref</span><br><span class=\"line\">非父子组件通信:https://vuefe.cn/guide/components.html#非父子组件通信</span><br><span class=\"line\">vue2.0 移除：1.$dispatch() 2.$broadcast() 3.events</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"select-vue\"><a href=\"#select-vue\" class=\"headerlink\" title=\"select.vue\"></a>select.vue</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"select\"</span> id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">      &lt;select-input @upup=<span class=\"string\">\"setData\"</span> :msgfromfather=<span class=\"string\">\"value\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">select-input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">list</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showList\"</span> @<span class=\"attr\">getValue</span>=<span class=\"string\">\"getValueData\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import selectInput from '@/</span>components/selectInput<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">import list from '</span>@/components/list<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">export default&#123;</span></span><br><span class=\"line\"><span class=\"string\">  created()&#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  mounted()&#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  data()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">      showList: false,</span></span><br><span class=\"line\"><span class=\"string\">      value:\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    setData(msg) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      this.showList = msg</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    getValueData(msg,msg1)&#123;</span></span><br><span class=\"line\"><span class=\"string\">      console.log(\"触发了这个事件了:\",msg,msg1)</span></span><br><span class=\"line\"><span class=\"string\">      this.value = msg</span></span><br><span class=\"line\"><span class=\"string\">      this.showList = msg1</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    selectInput,</span></span><br><span class=\"line\"><span class=\"string\">    list</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"selectInput-vue\"><a href=\"#selectInput-vue\" class=\"headerlink\" title=\"selectInput.vue\"></a>selectInput.vue</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"selectInput\"</span>&gt;</span><br><span class=\"line\">      &lt;input type=<span class=\"string\">\"text\"</span> placeholder=<span class=\"string\">\"请输入搜索关键字\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"searchInput\"</span> @click=<span class=\"string\">\"up\"</span> :value=<span class=\"string\">\"msgfromfather\"</span>/&gt;</span><br><span class=\"line\">      &lt;button <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"searchBtn\"</span>&gt;搜索&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      showList: true</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  created()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['msgfromfather'],</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    up() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$emit('upup',this.showList); /</span><span class=\"regexp\">/主动触发upup方法，</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"list-vue\"><a href=\"#list-vue\" class=\"headerlink\" title=\"list.vue\"></a>list.vue</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"selectList\"</span>&gt;</span><br><span class=\"line\">      &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"historyItem in history\"</span> @click=<span class=\"string\">\"getData(historyItem)\"</span>&gt;&#123;&#123;historyItem&#125;&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  created()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/组件二接受</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/    Hub.$on('change', (msg) =&gt; &#123; /</span><span class=\"regexp\">/Hub接收事件</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/      console.log(msg)</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      hidden:false,</span></span><br><span class=\"line\"><span class=\"regexp\">      history:['html','css','css3','js','vue','react','php','java']</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    getData(value)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      console.log(value)</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$emit('getValue',value,this.hidden); /</span><span class=\"regexp\">/主动触发upup方法，</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例子主要使用了父子组件之间的相互传递</p>\n<hr>\n<h3 id=\"父传子：\"><a href=\"#父传子：\" class=\"headerlink\" title=\"父传子：\"></a>父传子：</h3><p>父组件定义一个变量</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select-input</span> @<span class=\"attr\">upup</span>=<span class=\"string\">\"setData\"</span> <span class=\"attr\">:msgfromfather</span>=<span class=\"string\">\"value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">select-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>子组件props接受并回显</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> placeholder=<span class=\"string\">\"请输入搜索关键字\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"searchInput\"</span> @click=<span class=\"string\">\"up\"</span> :value=<span class=\"string\">\"msgfromfather\"</span>/&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      showList: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: [<span class=\"string\">'msgfromfather'</span>],</span><br><span class=\"line\">  computed: &#123;&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    up() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'upup'</span>,<span class=\"keyword\">this</span>.showList); <span class=\"comment\">//主动触发upup方法，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h3><p>子组件点击事件$emit触发父组件的事件，父组件事件中接受传递过来的数据</p>\n<h4 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"historyItem in history\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"getData(historyItem)\"</span>&gt;</span>&#123;&#123;historyItem&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  getData(value)&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">    this.$emit('getValue',value,this.hidden); //主动触发upup方法，</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">list</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showList\"</span> @<span class=\"attr\">getValue</span>=<span class=\"string\">\"getValueData\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">getValueData(msg,msg1)&#123;</span><br><span class=\"line\">  console.log(\"触发了这个事件了:\",msg,msg1)</span><br><span class=\"line\">  this.value = msg</span><br><span class=\"line\">  this.showList = msg1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.2.3.0新增的语法糖2.这种就不涉及到通过方法去操控父组件中的data改变，而是利用子传父的思想，把props中的属性值和父组件中的data形成捆绑，利用$emit改变子组件的data，变相改变了父组件中的data</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &#123;&#123;count&#125;&#125;    &lt;!--子组件用来传递父组件的方法--&gt;</span><br><span class=\"line\">    &lt;my-Com2 v-bind:parent-Count.sync = <span class=\"string\">'count'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">my-Com2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"com\"</span>&gt;</span><br><span class=\"line\">    &lt;!--在组件内部特意定义了一个触发父组件方法的点击事件--&gt;</span><br><span class=\"line\">    &lt;button @click=<span class=\"string\">\"changeParent\"</span>&gt;操作父组件的子组件方法&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myCom2 = &#123;        </span><br><span class=\"line\">        template:<span class=\"string\">'#com'</span>,</span><br><span class=\"line\">        data()&#123;            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;                </span><br><span class=\"line\">            title:<span class=\"string\">'子组件'</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,        </span><br><span class=\"line\">        <span class=\"comment\">// 父传子</span></span><br><span class=\"line\">        props:[<span class=\"string\">'parentCount'</span>],        </span><br><span class=\"line\">        methods:&#123;          </span><br><span class=\"line\">            <span class=\"comment\">// 用来专门触发父组件方法子组件，用来触发$emit</span></span><br><span class=\"line\">            changeParent()&#123;                </span><br><span class=\"line\">                <span class=\"comment\">// 根据上面的介绍原则等号左面的属于子组件的右面属于父组件</span></span><br><span class=\"line\">                <span class=\"comment\">// 将父子组件data 都绑定在一起，改变子组件就是改变了父组件</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:parentCount'</span>,<span class=\"number\">1000</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;        </span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,        </span><br><span class=\"line\">        data:&#123;          </span><br><span class=\"line\">            count:<span class=\"number\">0</span>,</span><br><span class=\"line\">        &#125;,        </span><br><span class=\"line\">        components:&#123;            </span><br><span class=\"line\">            <span class=\"comment\">// 在外部声明变量，使用代码简洁</span></span><br><span class=\"line\">            myCom2,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"兄弟组件之间的通信\"><a href=\"#兄弟组件之间的通信\" class=\"headerlink\" title=\"兄弟组件之间的通信\"></a>兄弟组件之间的通信</h3><blockquote>\n<p>如果2个组件不是父子组件那么如何通信呢？这时可以通过eventHub来实现通信.<br>所谓eventHub就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let Hub = new Vue(); //创建事件中心</span><br></pre></td></tr></table></figure>\n<p>组件1触发:   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"eve\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>methods: &#123;</span><br><span class=\"line\">    eve() &#123;</span><br><span class=\"line\">        Hub.$emit('change','hehe'); //Hub触发事件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件2触发:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">    Hub.$on('change', () =&gt; &#123; //Hub接收事件        this.msg = 'hehe';</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了非父子组件之间的通信了.原理就是把Hub当作一个中转站！</p>\n","site":{"data":{}},"excerpt":"<p>vue 的组件在vue框架中是特别重要的一个环节，在大型的项目中，组件显的相当的重要，这样在后期特别好维护，一块内容就是一个组件，随时随地的删除和修改不同的组件，接下来我想写一篇vuex 集中管理状态，所以在之前先简单的介绍一下vue组件之间的相互传参方式。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父传子：Props</span><br><span class=\"line\">子传父：子：$emit(eventName)  父$on(eventName)</span><br><span class=\"line\">父访问子：ref</span><br><span class=\"line\">非父子组件通信:https://vuefe.cn/guide/components.html#非父子组件通信</span><br><span class=\"line\">vue2.0 移除：1.$dispatch() 2.$broadcast() 3.events</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"select-vue\"><a href=\"#select-vue\" class=\"headerlink\" title=\"select.vue\"></a>select.vue</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"select\"</span> id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">      &lt;select-input @upup=<span class=\"string\">\"setData\"</span> :msgfromfather=<span class=\"string\">\"value\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">select-input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">list</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showList\"</span> @<span class=\"attr\">getValue</span>=<span class=\"string\">\"getValueData\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import selectInput from '@/</span>components/selectInput<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">import list from '</span>@/components/list<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">export default&#123;</span></span><br><span class=\"line\"><span class=\"string\">  created()&#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  mounted()&#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  data()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">      showList: false,</span></span><br><span class=\"line\"><span class=\"string\">      value:\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    setData(msg) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      this.showList = msg</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    getValueData(msg,msg1)&#123;</span></span><br><span class=\"line\"><span class=\"string\">      console.log(\"触发了这个事件了:\",msg,msg1)</span></span><br><span class=\"line\"><span class=\"string\">      this.value = msg</span></span><br><span class=\"line\"><span class=\"string\">      this.showList = msg1</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    selectInput,</span></span><br><span class=\"line\"><span class=\"string\">    list</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"selectInput-vue\"><a href=\"#selectInput-vue\" class=\"headerlink\" title=\"selectInput.vue\"></a>selectInput.vue</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"selectInput\"</span>&gt;</span><br><span class=\"line\">      &lt;input type=<span class=\"string\">\"text\"</span> placeholder=<span class=\"string\">\"请输入搜索关键字\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"searchInput\"</span> @click=<span class=\"string\">\"up\"</span> :value=<span class=\"string\">\"msgfromfather\"</span>/&gt;</span><br><span class=\"line\">      &lt;button <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"searchBtn\"</span>&gt;搜索&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      showList: true</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  created()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['msgfromfather'],</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    up() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$emit('upup',this.showList); /</span><span class=\"regexp\">/主动触发upup方法，</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"list-vue\"><a href=\"#list-vue\" class=\"headerlink\" title=\"list.vue\"></a>list.vue</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"selectList\"</span>&gt;</span><br><span class=\"line\">      &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"historyItem in history\"</span> @click=<span class=\"string\">\"getData(historyItem)\"</span>&gt;&#123;&#123;historyItem&#125;&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  created()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/组件二接受</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/    Hub.$on('change', (msg) =&gt; &#123; /</span><span class=\"regexp\">/Hub接收事件</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/      console.log(msg)</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      hidden:false,</span></span><br><span class=\"line\"><span class=\"regexp\">      history:['html','css','css3','js','vue','react','php','java']</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    getData(value)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      console.log(value)</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$emit('getValue',value,this.hidden); /</span><span class=\"regexp\">/主动触发upup方法，</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例子主要使用了父子组件之间的相互传递</p>\n<hr>\n<h3 id=\"父传子：\"><a href=\"#父传子：\" class=\"headerlink\" title=\"父传子：\"></a>父传子：</h3><p>父组件定义一个变量</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select-input</span> @<span class=\"attr\">upup</span>=<span class=\"string\">\"setData\"</span> <span class=\"attr\">:msgfromfather</span>=<span class=\"string\">\"value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">select-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>子组件props接受并回显</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> placeholder=<span class=\"string\">\"请输入搜索关键字\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"searchInput\"</span> @click=<span class=\"string\">\"up\"</span> :value=<span class=\"string\">\"msgfromfather\"</span>/&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      showList: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: [<span class=\"string\">'msgfromfather'</span>],</span><br><span class=\"line\">  computed: &#123;&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    up() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'upup'</span>,<span class=\"keyword\">this</span>.showList); <span class=\"comment\">//主动触发upup方法，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h3><p>子组件点击事件$emit触发父组件的事件，父组件事件中接受传递过来的数据</p>\n<h4 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"historyItem in history\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"getData(historyItem)\"</span>&gt;</span>&#123;&#123;historyItem&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  getData(value)&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">    this.$emit('getValue',value,this.hidden); //主动触发upup方法，</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">list</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showList\"</span> @<span class=\"attr\">getValue</span>=<span class=\"string\">\"getValueData\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">getValueData(msg,msg1)&#123;</span><br><span class=\"line\">  console.log(\"触发了这个事件了:\",msg,msg1)</span><br><span class=\"line\">  this.value = msg</span><br><span class=\"line\">  this.showList = msg1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.2.3.0新增的语法糖2.这种就不涉及到通过方法去操控父组件中的data改变，而是利用子传父的思想，把props中的属性值和父组件中的data形成捆绑，利用$emit改变子组件的data，变相改变了父组件中的data</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &#123;&#123;count&#125;&#125;    &lt;!--子组件用来传递父组件的方法--&gt;</span><br><span class=\"line\">    &lt;my-Com2 v-bind:parent-Count.sync = <span class=\"string\">'count'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">my-Com2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template id=<span class=\"string\">\"com\"</span>&gt;</span><br><span class=\"line\">    &lt;!--在组件内部特意定义了一个触发父组件方法的点击事件--&gt;</span><br><span class=\"line\">    &lt;button @click=<span class=\"string\">\"changeParent\"</span>&gt;操作父组件的子组件方法&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myCom2 = &#123;        </span><br><span class=\"line\">        template:<span class=\"string\">'#com'</span>,</span><br><span class=\"line\">        data()&#123;            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;                </span><br><span class=\"line\">            title:<span class=\"string\">'子组件'</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,        </span><br><span class=\"line\">        <span class=\"comment\">// 父传子</span></span><br><span class=\"line\">        props:[<span class=\"string\">'parentCount'</span>],        </span><br><span class=\"line\">        methods:&#123;          </span><br><span class=\"line\">            <span class=\"comment\">// 用来专门触发父组件方法子组件，用来触发$emit</span></span><br><span class=\"line\">            changeParent()&#123;                </span><br><span class=\"line\">                <span class=\"comment\">// 根据上面的介绍原则等号左面的属于子组件的右面属于父组件</span></span><br><span class=\"line\">                <span class=\"comment\">// 将父子组件data 都绑定在一起，改变子组件就是改变了父组件</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:parentCount'</span>,<span class=\"number\">1000</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;        </span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,        </span><br><span class=\"line\">        data:&#123;          </span><br><span class=\"line\">            count:<span class=\"number\">0</span>,</span><br><span class=\"line\">        &#125;,        </span><br><span class=\"line\">        components:&#123;            </span><br><span class=\"line\">            <span class=\"comment\">// 在外部声明变量，使用代码简洁</span></span><br><span class=\"line\">            myCom2,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"兄弟组件之间的通信\"><a href=\"#兄弟组件之间的通信\" class=\"headerlink\" title=\"兄弟组件之间的通信\"></a>兄弟组件之间的通信</h3><blockquote>\n<p>如果2个组件不是父子组件那么如何通信呢？这时可以通过eventHub来实现通信.<br>所谓eventHub就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let Hub = new Vue(); //创建事件中心</span><br></pre></td></tr></table></figure>\n<p>组件1触发:   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"eve\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>methods: &#123;</span><br><span class=\"line\">    eve() &#123;</span><br><span class=\"line\">        Hub.$emit('change','hehe'); //Hub触发事件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件2触发:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">    Hub.$on('change', () =&gt; &#123; //Hub接收事件        this.msg = 'hehe';</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了非父子组件之间的通信了.原理就是把Hub当作一个中转站！</p>"},{"title":"npm包模块发布","date":"2018-06-26T06:44:11.000Z","_content":"\n#### 前言\n现在前端开发框架特别流行，vue,react,angular，在开发中，npm包是必不可少的，这就是相当于传统开发中的插件，那么如何发布自己的包？\n\nnpm i 包名称 ，就能下载一个包插件，那发布的流程是什么呢？\n<!-- more -->\n##### 必备的环境\n\n>node(npm)环境是必须的;nrm是用来管理npm镜像的\n\n```javascript\nnpm install -g nrm :安装nrm\nnrm ls :npm镜像列表\nnrm use 镜像名称 :切换镜像\n```\n\n##### 发布包\n\n  1.npm init 一直回车，新建package.json文件\n  2.注册npm账号：https://www.npmjs.com/\n  3.npm login; 输入账号密码邮箱\n  4.npm publish\n\n>登陆状态中保证了，特别注意官网注册成功后要在邮箱中先确认，不然之后提交包的时候会报错\n\n提交成功会提示，然后就可以在npm官网个人中心查看，我测试的时候会有点延迟，在使用的时候要新建项目在npm install 你的包名称，想想也是，谁会在自己这个包中在下载，我觉下了好几次，报错，仔细一看原来是包的不能在此目录下面下载此包文件.\n\n[github:https://github.com/xiaosongread/mgd-localstorage](https://github.com/xiaosongread/mgd-localstorage)\n\n\n\n\n","source":"_posts/jc-7.md","raw":"---\ntitle: npm包模块发布\ncategories: gc-end\ndate: 2018-06-26 14:44:11\n---\n\n#### 前言\n现在前端开发框架特别流行，vue,react,angular，在开发中，npm包是必不可少的，这就是相当于传统开发中的插件，那么如何发布自己的包？\n\nnpm i 包名称 ，就能下载一个包插件，那发布的流程是什么呢？\n<!-- more -->\n##### 必备的环境\n\n>node(npm)环境是必须的;nrm是用来管理npm镜像的\n\n```javascript\nnpm install -g nrm :安装nrm\nnrm ls :npm镜像列表\nnrm use 镜像名称 :切换镜像\n```\n\n##### 发布包\n\n  1.npm init 一直回车，新建package.json文件\n  2.注册npm账号：https://www.npmjs.com/\n  3.npm login; 输入账号密码邮箱\n  4.npm publish\n\n>登陆状态中保证了，特别注意官网注册成功后要在邮箱中先确认，不然之后提交包的时候会报错\n\n提交成功会提示，然后就可以在npm官网个人中心查看，我测试的时候会有点延迟，在使用的时候要新建项目在npm install 你的包名称，想想也是，谁会在自己这个包中在下载，我觉下了好几次，报错，仔细一看原来是包的不能在此目录下面下载此包文件.\n\n[github:https://github.com/xiaosongread/mgd-localstorage](https://github.com/xiaosongread/mgd-localstorage)\n\n\n\n\n","slug":"jc-7","published":1,"updated":"2019-06-10T07:02:13.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0l000954s6idgb47jj","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>现在前端开发框架特别流行，vue,react,angular，在开发中，npm包是必不可少的，这就是相当于传统开发中的插件，那么如何发布自己的包？</p>\n<p>npm i 包名称 ，就能下载一个包插件，那发布的流程是什么呢？<br><a id=\"more\"></a></p>\n<h5 id=\"必备的环境\"><a href=\"#必备的环境\" class=\"headerlink\" title=\"必备的环境\"></a>必备的环境</h5><blockquote>\n<p>node(npm)环境是必须的;nrm是用来管理npm镜像的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm :安装nrm</span><br><span class=\"line\">nrm ls :npm镜像列表</span><br><span class=\"line\">nrm use 镜像名称 :切换镜像</span><br></pre></td></tr></table></figure>\n<h5 id=\"发布包\"><a href=\"#发布包\" class=\"headerlink\" title=\"发布包\"></a>发布包</h5><p>  1.npm init 一直回车，新建package.json文件<br>  2.注册npm账号：<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/</a><br>  3.npm login; 输入账号密码邮箱<br>  4.npm publish</p>\n<blockquote>\n<p>登陆状态中保证了，特别注意官网注册成功后要在邮箱中先确认，不然之后提交包的时候会报错</p>\n</blockquote>\n<p>提交成功会提示，然后就可以在npm官网个人中心查看，我测试的时候会有点延迟，在使用的时候要新建项目在npm install 你的包名称，想想也是，谁会在自己这个包中在下载，我觉下了好几次，报错，仔细一看原来是包的不能在此目录下面下载此包文件.</p>\n<p><a href=\"https://github.com/xiaosongread/mgd-localstorage\" target=\"_blank\" rel=\"noopener\">github:https://github.com/xiaosongread/mgd-localstorage</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>现在前端开发框架特别流行，vue,react,angular，在开发中，npm包是必不可少的，这就是相当于传统开发中的插件，那么如何发布自己的包？</p>\n<p>npm i 包名称 ，就能下载一个包插件，那发布的流程是什么呢？<br>","more":"</p>\n<h5 id=\"必备的环境\"><a href=\"#必备的环境\" class=\"headerlink\" title=\"必备的环境\"></a>必备的环境</h5><blockquote>\n<p>node(npm)环境是必须的;nrm是用来管理npm镜像的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm :安装nrm</span><br><span class=\"line\">nrm ls :npm镜像列表</span><br><span class=\"line\">nrm use 镜像名称 :切换镜像</span><br></pre></td></tr></table></figure>\n<h5 id=\"发布包\"><a href=\"#发布包\" class=\"headerlink\" title=\"发布包\"></a>发布包</h5><p>  1.npm init 一直回车，新建package.json文件<br>  2.注册npm账号：<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/</a><br>  3.npm login; 输入账号密码邮箱<br>  4.npm publish</p>\n<blockquote>\n<p>登陆状态中保证了，特别注意官网注册成功后要在邮箱中先确认，不然之后提交包的时候会报错</p>\n</blockquote>\n<p>提交成功会提示，然后就可以在npm官网个人中心查看，我测试的时候会有点延迟，在使用的时候要新建项目在npm install 你的包名称，想想也是，谁会在自己这个包中在下载，我觉下了好几次，报错，仔细一看原来是包的不能在此目录下面下载此包文件.</p>\n<p><a href=\"https://github.com/xiaosongread/mgd-localstorage\" target=\"_blank\" rel=\"noopener\">github:https://github.com/xiaosongread/mgd-localstorage</a></p>"},{"title":"import和require的区别","date":"2019-06-11T03:55:32.000Z","_content":"\nnode编程中最重要的思想就是模块化，import和require都是被模块化所使用。\n\n#### 遵循规范\n+ require 是 AMD规范引入方式\n+ import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法\n<!-- more -->\n#### 调用时间\n+ require是运行时调用\n+ import是编译时调用\n\n#### 本质\n+ require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量\n+ import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require\n\n### require / exports\n```javascript\n// CommonJS模块\nlet { stat, exists, readFile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n\nconst fs = require('fs')\nexports.fs = fs\nmodule.exports = fs\n```\n\n### import / export\n```javascript\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\nexport default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n```\n\n1.通过require引入基础数据类型时，属于复制该变量。\n2.通过require引入复杂数据类型时，数据浅拷贝该对象。\n3.出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）\n4.CommonJS模块默认export的是一个对象，即使导出的是基础数据类型\n\n加载方式|规范|命令|特点\n---|:--:|---:\n运行时加载|CommonJS/AMD|require|社区方案，提供了服务器/浏览器的模块加载方案。非语言层面的标准。只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。\n编译时加载|ESMAScript6+|import|语言规格层面支持模块功能。支持编译时静态分析，便于JS引入宏和类型检验。动态绑定","source":"_posts/jc-8.md","raw":"---\ntitle: import和require的区别\ncategories: js-end\ndate: 2019-06-11 11:55:32\n---\n\nnode编程中最重要的思想就是模块化，import和require都是被模块化所使用。\n\n#### 遵循规范\n+ require 是 AMD规范引入方式\n+ import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法\n<!-- more -->\n#### 调用时间\n+ require是运行时调用\n+ import是编译时调用\n\n#### 本质\n+ require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量\n+ import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require\n\n### require / exports\n```javascript\n// CommonJS模块\nlet { stat, exists, readFile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n\nconst fs = require('fs')\nexports.fs = fs\nmodule.exports = fs\n```\n\n### import / export\n```javascript\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\nexport default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n```\n\n1.通过require引入基础数据类型时，属于复制该变量。\n2.通过require引入复杂数据类型时，数据浅拷贝该对象。\n3.出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）\n4.CommonJS模块默认export的是一个对象，即使导出的是基础数据类型\n\n加载方式|规范|命令|特点\n---|:--:|---:\n运行时加载|CommonJS/AMD|require|社区方案，提供了服务器/浏览器的模块加载方案。非语言层面的标准。只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。\n编译时加载|ESMAScript6+|import|语言规格层面支持模块功能。支持编译时静态分析，便于JS引入宏和类型检验。动态绑定","slug":"jc-8","published":1,"updated":"2019-06-11T09:31:31.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0n000c54s6f9cfzqgg","content":"<p>node编程中最重要的思想就是模块化，import和require都是被模块化所使用。</p>\n<h4 id=\"遵循规范\"><a href=\"#遵循规范\" class=\"headerlink\" title=\"遵循规范\"></a>遵循规范</h4><ul>\n<li>require 是 AMD规范引入方式</li>\n<li>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法<a id=\"more\"></a>\n<h4 id=\"调用时间\"><a href=\"#调用时间\" class=\"headerlink\" title=\"调用时间\"></a>调用时间</h4></li>\n<li>require是运行时调用</li>\n<li>import是编译时调用</li>\n</ul>\n<h4 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h4><ul>\n<li>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量</li>\n<li>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</li>\n</ul>\n<h3 id=\"require-exports\"><a href=\"#require-exports\" class=\"headerlink\" title=\"require / exports\"></a>require / exports</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CommonJS模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; stat, exists, readFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> stat = _fs.stat;</span><br><span class=\"line\"><span class=\"keyword\">let</span> exists = _fs.exists;</span><br><span class=\"line\"><span class=\"keyword\">let</span> readfile = _fs.readfile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">exports.fs = fs</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fs</span><br></pre></td></tr></table></figure>\n<h3 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import / export\"></a>import / export</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> fs&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile <span class=\"keyword\">as</span> read&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs, &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> </span>&#123;readFile, read&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br></pre></td></tr></table></figure>\n<p>1.通过require引入基础数据类型时，属于复制该变量。<br>2.通过require引入复杂数据类型时，数据浅拷贝该对象。<br>3.出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）<br>4.CommonJS模块默认export的是一个对象，即使导出的是基础数据类型</p>\n<table>\n<thead>\n<tr>\n<th>加载方式</th>\n<th style=\"text-align:center\">规范</th>\n<th style=\"text-align:right\">命令</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>运行时加载</td>\n<td style=\"text-align:center\">CommonJS/AMD</td>\n<td style=\"text-align:right\">require</td>\n<td>社区方案，提供了服务器/浏览器的模块加载方案。非语言层面的标准。只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。</td>\n</tr>\n<tr>\n<td>编译时加载</td>\n<td style=\"text-align:center\">ESMAScript6+</td>\n<td style=\"text-align:right\">import</td>\n<td>语言规格层面支持模块功能。支持编译时静态分析，便于JS引入宏和类型检验。动态绑定</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>node编程中最重要的思想就是模块化，import和require都是被模块化所使用。</p>\n<h4 id=\"遵循规范\"><a href=\"#遵循规范\" class=\"headerlink\" title=\"遵循规范\"></a>遵循规范</h4><ul>\n<li>require 是 AMD规范引入方式</li>\n<li>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法","more":"<h4 id=\"调用时间\"><a href=\"#调用时间\" class=\"headerlink\" title=\"调用时间\"></a>调用时间</h4></li>\n<li>require是运行时调用</li>\n<li>import是编译时调用</li>\n</ul>\n<h4 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h4><ul>\n<li>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量</li>\n<li>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</li>\n</ul>\n<h3 id=\"require-exports\"><a href=\"#require-exports\" class=\"headerlink\" title=\"require / exports\"></a>require / exports</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CommonJS模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; stat, exists, readFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> stat = _fs.stat;</span><br><span class=\"line\"><span class=\"keyword\">let</span> exists = _fs.exists;</span><br><span class=\"line\"><span class=\"keyword\">let</span> readfile = _fs.readfile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">exports.fs = fs</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fs</span><br></pre></td></tr></table></figure>\n<h3 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import / export\"></a>import / export</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> fs&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile <span class=\"keyword\">as</span> read&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs, &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> </span>&#123;readFile, read&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span></span><br></pre></td></tr></table></figure>\n<p>1.通过require引入基础数据类型时，属于复制该变量。<br>2.通过require引入复杂数据类型时，数据浅拷贝该对象。<br>3.出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）<br>4.CommonJS模块默认export的是一个对象，即使导出的是基础数据类型</p>\n<table>\n<thead>\n<tr>\n<th>加载方式</th>\n<th style=\"text-align:center\">规范</th>\n<th style=\"text-align:right\">命令</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>运行时加载</td>\n<td style=\"text-align:center\">CommonJS/AMD</td>\n<td style=\"text-align:right\">require</td>\n<td>社区方案，提供了服务器/浏览器的模块加载方案。非语言层面的标准。只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。</td>\n</tr>\n<tr>\n<td>编译时加载</td>\n<td style=\"text-align:center\">ESMAScript6+</td>\n<td style=\"text-align:right\">import</td>\n<td>语言规格层面支持模块功能。支持编译时静态分析，便于JS引入宏和类型检验。动态绑定</td>\n</tr>\n</tbody>\n</table>"},{"title":"移动端（微信等）使用 vConsole调试console","date":"2019-06-16T07:10:29.000Z","_content":"\n### 前言\n移动端和h5的混合开发模式，在h5中调用原生的方法来获取数据的交互特别多，但是提示比较困难，因为在应用中不像浏览器，无法打开控制台，改如何调试呢？\n\n#### use\n```javascript\nnpm install vconsole\n\nimport VConsole from 'vconsole/dist/vconsole.min.js' //import vconsole\nlet vConsole = new VConsole() // 初始化\n```\n<!-- more -->\n或者，找到模块下面的dist/vconsole.min.js ，然后复制到自己的项目中\n```html\n<head>\n    <script src=\"dist/vconsole.min.js\"></script>\n</head>\n<!--建议在 `<head>` 中引入哦~ -->\n<script>\n  // 初始化\n  var vConsole = new VConsole();\n  console.log('VConsole is cool');\n</script>\n```\n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/vconsole1.png)\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/vconsole.png)\n\n出现上面的就是安装成功了！\n\n> 请注意，VConsole 只是 vConsole 的原型，而非一个已实例化的对象。所以在手动 new 实例化之前，vConsole 不会被插入到网页中。\n\n[官方文档](https://github.com/Tencent/vConsole/blob/dev/doc/tutorial_CN.md)","source":"_posts/jc-9.md","raw":"---\ntitle: 移动端（微信等）使用 vConsole调试console\ncategories: gc-end\ndate: 2019-06-16 15:10:29\n---\n\n### 前言\n移动端和h5的混合开发模式，在h5中调用原生的方法来获取数据的交互特别多，但是提示比较困难，因为在应用中不像浏览器，无法打开控制台，改如何调试呢？\n\n#### use\n```javascript\nnpm install vconsole\n\nimport VConsole from 'vconsole/dist/vconsole.min.js' //import vconsole\nlet vConsole = new VConsole() // 初始化\n```\n<!-- more -->\n或者，找到模块下面的dist/vconsole.min.js ，然后复制到自己的项目中\n```html\n<head>\n    <script src=\"dist/vconsole.min.js\"></script>\n</head>\n<!--建议在 `<head>` 中引入哦~ -->\n<script>\n  // 初始化\n  var vConsole = new VConsole();\n  console.log('VConsole is cool');\n</script>\n```\n\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/vconsole1.png)\n![blockchain](https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/vconsole.png)\n\n出现上面的就是安装成功了！\n\n> 请注意，VConsole 只是 vConsole 的原型，而非一个已实例化的对象。所以在手动 new 实例化之前，vConsole 不会被插入到网页中。\n\n[官方文档](https://github.com/Tencent/vConsole/blob/dev/doc/tutorial_CN.md)","slug":"jc-9","published":1,"updated":"2019-06-16T07:36:53.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx1stc0q000d54s6ax1wwcnd","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>移动端和h5的混合开发模式，在h5中调用原生的方法来获取数据的交互特别多，但是提示比较困难，因为在应用中不像浏览器，无法打开控制台，改如何调试呢？</p>\n<h4 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vconsole</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> VConsole <span class=\"keyword\">from</span> <span class=\"string\">'vconsole/dist/vconsole.min.js'</span> <span class=\"comment\">//import vconsole</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> vConsole = <span class=\"keyword\">new</span> VConsole() <span class=\"comment\">// 初始化</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>或者，找到模块下面的dist/vconsole.min.js ，然后复制到自己的项目中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/vconsole.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--建议在 `&lt;head&gt;` 中引入哦~ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 初始化</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> vConsole = <span class=\"keyword\">new</span> VConsole();</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'VConsole is cool'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/vconsole1.png\" alt=\"blockchain\"><br><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/vconsole.png\" alt=\"blockchain\"></p>\n<p>出现上面的就是安装成功了！</p>\n<blockquote>\n<p>请注意，VConsole 只是 vConsole 的原型，而非一个已实例化的对象。所以在手动 new 实例化之前，vConsole 不会被插入到网页中。</p>\n</blockquote>\n<p><a href=\"https://github.com/Tencent/vConsole/blob/dev/doc/tutorial_CN.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>移动端和h5的混合开发模式，在h5中调用原生的方法来获取数据的交互特别多，但是提示比较困难，因为在应用中不像浏览器，无法打开控制台，改如何调试呢？</p>\n<h4 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vconsole</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> VConsole <span class=\"keyword\">from</span> <span class=\"string\">'vconsole/dist/vconsole.min.js'</span> <span class=\"comment\">//import vconsole</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> vConsole = <span class=\"keyword\">new</span> VConsole() <span class=\"comment\">// 初始化</span></span><br></pre></td></tr></table></figure>","more":"<p>或者，找到模块下面的dist/vconsole.min.js ，然后复制到自己的项目中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/vconsole.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--建议在 `&lt;head&gt;` 中引入哦~ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 初始化</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> vConsole = <span class=\"keyword\">new</span> VConsole();</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'VConsole is cool'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/vconsole1.png\" alt=\"blockchain\"><br><img src=\"https://raw.githubusercontent.com/xiaosongread/github-xiaosongread-hexo/master/img-folder/vconsole.png\" alt=\"blockchain\"></p>\n<p>出现上面的就是安装成功了！</p>\n<blockquote>\n<p>请注意，VConsole 只是 vConsole 的原型，而非一个已实例化的对象。所以在手动 new 实例化之前，vConsole 不会被插入到网页中。</p>\n</blockquote>\n<p><a href=\"https://github.com/Tencent/vConsole/blob/dev/doc/tutorial_CN.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjx1stc0a000154s63uk8yl80","category_id":"cjx1stc0e000354s6owrkrn51","_id":"cjx1stc0m000b54s6wolps5rl"},{"post_id":"cjx1stc0k000854s6w8srdzms","category_id":"cjx1stc0e000354s6owrkrn51","_id":"cjx1stc0r000e54s6n64fe93a"},{"post_id":"cjx1stc0c000254s6b7g8jlnm","category_id":"cjx1stc0e000354s6owrkrn51","_id":"cjx1stc0s000g54s6t4bh265w"},{"post_id":"cjx1stc0l000954s6idgb47jj","category_id":"cjx1stc0e000354s6owrkrn51","_id":"cjx1stc0s000h54s6hf46l5ur"},{"post_id":"cjx1stc0g000454s6lffpkbcd","category_id":"cjx1stc0e000354s6owrkrn51","_id":"cjx1stc0s000j54s6zw3jnzuy"},{"post_id":"cjx1stc0q000d54s6ax1wwcnd","category_id":"cjx1stc0e000354s6owrkrn51","_id":"cjx1stc0t000k54s6bbezmi3k"},{"post_id":"cjx1stc0h000554s6gmxvok3e","category_id":"cjx1stc0r000f54s6jwtn1xwb","_id":"cjx1stc0u000m54s69d58pyd5"},{"post_id":"cjx1stc0i000654s66k1or0eq","category_id":"cjx1stc0s000i54s6bop7gvzg","_id":"cjx1stc0v000n54s6e3dn1i4z"},{"post_id":"cjx1stc0n000c54s6f9cfzqgg","category_id":"cjx1stc0r000f54s6jwtn1xwb","_id":"cjx1stc0v000o54s6dx0weby8"}],"PostTag":[],"Tag":[]}}